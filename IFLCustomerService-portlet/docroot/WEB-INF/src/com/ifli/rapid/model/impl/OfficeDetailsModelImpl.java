/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.OfficeDetails;
import com.ifli.rapid.model.OfficeDetailsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OfficeDetails service. Represents a row in the &quot;office_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.OfficeDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OfficeDetailsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see OfficeDetailsImpl
 * @see com.ifli.rapid.model.OfficeDetails
 * @see com.ifli.rapid.model.OfficeDetailsModel
 * @generated
 */
public class OfficeDetailsModelImpl extends BaseModelImpl<OfficeDetails>
	implements OfficeDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a office details model instance should use the {@link com.ifli.rapid.model.OfficeDetails} interface instead.
	 */
	public static final String TABLE_NAME = "office_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "OFFICE_ID", Types.INTEGER },
			{ "OFFICE_NAME", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table office_details (OFFICE_ID INTEGER not null primary key IDENTITY,OFFICE_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table office_details";
	public static final String ORDER_BY_JPQL = " ORDER BY officeDetails.OFFICE_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY office_details.OFFICE_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.OfficeDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.OfficeDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.OfficeDetails"));

	public OfficeDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _OFFICE_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setOFFICE_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _OFFICE_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OfficeDetails.class;
	}

	@Override
	public String getModelClassName() {
		return OfficeDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("OFFICE_ID", getOFFICE_ID());
		attributes.put("OFFICE_NAME", getOFFICE_NAME());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer OFFICE_ID = (Integer)attributes.get("OFFICE_ID");

		if (OFFICE_ID != null) {
			setOFFICE_ID(OFFICE_ID);
		}

		String OFFICE_NAME = (String)attributes.get("OFFICE_NAME");

		if (OFFICE_NAME != null) {
			setOFFICE_NAME(OFFICE_NAME);
		}
	}

	@Override
	public int getOFFICE_ID() {
		return _OFFICE_ID;
	}

	@Override
	public void setOFFICE_ID(int OFFICE_ID) {
		_OFFICE_ID = OFFICE_ID;
	}

	@Override
	public String getOFFICE_NAME() {
		if (_OFFICE_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _OFFICE_NAME;
		}
	}

	@Override
	public void setOFFICE_NAME(String OFFICE_NAME) {
		_OFFICE_NAME = OFFICE_NAME;
	}

	@Override
	public OfficeDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OfficeDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OfficeDetailsImpl officeDetailsImpl = new OfficeDetailsImpl();

		officeDetailsImpl.setOFFICE_ID(getOFFICE_ID());
		officeDetailsImpl.setOFFICE_NAME(getOFFICE_NAME());

		officeDetailsImpl.resetOriginalValues();

		return officeDetailsImpl;
	}

	@Override
	public int compareTo(OfficeDetails officeDetails) {
		int primaryKey = officeDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OfficeDetails)) {
			return false;
		}

		OfficeDetails officeDetails = (OfficeDetails)obj;

		int primaryKey = officeDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OfficeDetails> toCacheModel() {
		OfficeDetailsCacheModel officeDetailsCacheModel = new OfficeDetailsCacheModel();

		officeDetailsCacheModel.OFFICE_ID = getOFFICE_ID();

		officeDetailsCacheModel.OFFICE_NAME = getOFFICE_NAME();

		String OFFICE_NAME = officeDetailsCacheModel.OFFICE_NAME;

		if ((OFFICE_NAME != null) && (OFFICE_NAME.length() == 0)) {
			officeDetailsCacheModel.OFFICE_NAME = null;
		}

		return officeDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{OFFICE_ID=");
		sb.append(getOFFICE_ID());
		sb.append(", OFFICE_NAME=");
		sb.append(getOFFICE_NAME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.OfficeDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>OFFICE_ID</column-name><column-value><![CDATA[");
		sb.append(getOFFICE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>OFFICE_NAME</column-name><column-value><![CDATA[");
		sb.append(getOFFICE_NAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OfficeDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OfficeDetails.class
		};
	private int _OFFICE_ID;
	private String _OFFICE_NAME;
	private OfficeDetails _escapedModel;
}