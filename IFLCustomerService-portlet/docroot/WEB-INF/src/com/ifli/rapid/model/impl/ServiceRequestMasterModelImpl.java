/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.ServiceRequestMaster;
import com.ifli.rapid.model.ServiceRequestMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceRequestMaster service. Represents a row in the &quot;ServiceRequestMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.ServiceRequestMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceRequestMasterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see ServiceRequestMasterImpl
 * @see com.ifli.rapid.model.ServiceRequestMaster
 * @see com.ifli.rapid.model.ServiceRequestMasterModel
 * @generated
 */
public class ServiceRequestMasterModelImpl extends BaseModelImpl<ServiceRequestMaster>
	implements ServiceRequestMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service request master model instance should use the {@link com.ifli.rapid.model.ServiceRequestMaster} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceRequestMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.VARCHAR },
			{ "Type", Types.VARCHAR },
			{ "ContactId", Types.VARCHAR },
			{ "addressTypeId", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "PolicyNo", Types.INTEGER },
			{ "MobileNo", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "startPreferedTime", Types.TIMESTAMP },
			{ "endPreferedTime", Types.TIMESTAMP },
			{ "PreferedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceRequestMaster (Id VARCHAR(75) not null primary key IDENTITY,Type VARCHAR(75) null,ContactId VARCHAR(75) null,addressTypeId VARCHAR(75) null,address VARCHAR(75) null,PolicyNo INTEGER,MobileNo VARCHAR(75) null,description VARCHAR(75) null,startPreferedTime DATE null,endPreferedTime DATE null,PreferedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ServiceRequestMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceRequestMaster.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceRequestMaster.Id ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.ServiceRequestMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.ServiceRequestMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.ServiceRequestMaster"));

	public ServiceRequestMasterModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceRequestMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceRequestMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("Type", getType());
		attributes.put("ContactId", getContactId());
		attributes.put("addressTypeId", getAddressTypeId());
		attributes.put("address", getAddress());
		attributes.put("PolicyNo", getPolicyNo());
		attributes.put("MobileNo", getMobileNo());
		attributes.put("description", getDescription());
		attributes.put("startPreferedTime", getStartPreferedTime());
		attributes.put("endPreferedTime", getEndPreferedTime());
		attributes.put("PreferedDate", getPreferedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String Id = (String)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String Type = (String)attributes.get("Type");

		if (Type != null) {
			setType(Type);
		}

		String ContactId = (String)attributes.get("ContactId");

		if (ContactId != null) {
			setContactId(ContactId);
		}

		String addressTypeId = (String)attributes.get("addressTypeId");

		if (addressTypeId != null) {
			setAddressTypeId(addressTypeId);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		Integer PolicyNo = (Integer)attributes.get("PolicyNo");

		if (PolicyNo != null) {
			setPolicyNo(PolicyNo);
		}

		String MobileNo = (String)attributes.get("MobileNo");

		if (MobileNo != null) {
			setMobileNo(MobileNo);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date startPreferedTime = (Date)attributes.get("startPreferedTime");

		if (startPreferedTime != null) {
			setStartPreferedTime(startPreferedTime);
		}

		Date endPreferedTime = (Date)attributes.get("endPreferedTime");

		if (endPreferedTime != null) {
			setEndPreferedTime(endPreferedTime);
		}

		Date PreferedDate = (Date)attributes.get("PreferedDate");

		if (PreferedDate != null) {
			setPreferedDate(PreferedDate);
		}
	}

	@Override
	public String getId() {
		if (_Id == null) {
			return StringPool.BLANK;
		}
		else {
			return _Id;
		}
	}

	@Override
	public void setId(String Id) {
		_Id = Id;
	}

	@Override
	public String getType() {
		if (_Type == null) {
			return StringPool.BLANK;
		}
		else {
			return _Type;
		}
	}

	@Override
	public void setType(String Type) {
		_Type = Type;
	}

	@Override
	public String getContactId() {
		if (_ContactId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ContactId;
		}
	}

	@Override
	public void setContactId(String ContactId) {
		_ContactId = ContactId;
	}

	@Override
	public String getAddressTypeId() {
		if (_addressTypeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _addressTypeId;
		}
	}

	@Override
	public void setAddressTypeId(String addressTypeId) {
		_addressTypeId = addressTypeId;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public int getPolicyNo() {
		return _PolicyNo;
	}

	@Override
	public void setPolicyNo(int PolicyNo) {
		_PolicyNo = PolicyNo;
	}

	@Override
	public String getMobileNo() {
		if (_MobileNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _MobileNo;
		}
	}

	@Override
	public void setMobileNo(String MobileNo) {
		_MobileNo = MobileNo;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getStartPreferedTime() {
		return _startPreferedTime;
	}

	@Override
	public void setStartPreferedTime(Date startPreferedTime) {
		_startPreferedTime = startPreferedTime;
	}

	@Override
	public Date getEndPreferedTime() {
		return _endPreferedTime;
	}

	@Override
	public void setEndPreferedTime(Date endPreferedTime) {
		_endPreferedTime = endPreferedTime;
	}

	@Override
	public Date getPreferedDate() {
		return _PreferedDate;
	}

	@Override
	public void setPreferedDate(Date PreferedDate) {
		_PreferedDate = PreferedDate;
	}

	@Override
	public ServiceRequestMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceRequestMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceRequestMasterImpl serviceRequestMasterImpl = new ServiceRequestMasterImpl();

		serviceRequestMasterImpl.setId(getId());
		serviceRequestMasterImpl.setType(getType());
		serviceRequestMasterImpl.setContactId(getContactId());
		serviceRequestMasterImpl.setAddressTypeId(getAddressTypeId());
		serviceRequestMasterImpl.setAddress(getAddress());
		serviceRequestMasterImpl.setPolicyNo(getPolicyNo());
		serviceRequestMasterImpl.setMobileNo(getMobileNo());
		serviceRequestMasterImpl.setDescription(getDescription());
		serviceRequestMasterImpl.setStartPreferedTime(getStartPreferedTime());
		serviceRequestMasterImpl.setEndPreferedTime(getEndPreferedTime());
		serviceRequestMasterImpl.setPreferedDate(getPreferedDate());

		serviceRequestMasterImpl.resetOriginalValues();

		return serviceRequestMasterImpl;
	}

	@Override
	public int compareTo(ServiceRequestMaster serviceRequestMaster) {
		String primaryKey = serviceRequestMaster.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceRequestMaster)) {
			return false;
		}

		ServiceRequestMaster serviceRequestMaster = (ServiceRequestMaster)obj;

		String primaryKey = serviceRequestMaster.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ServiceRequestMaster> toCacheModel() {
		ServiceRequestMasterCacheModel serviceRequestMasterCacheModel = new ServiceRequestMasterCacheModel();

		serviceRequestMasterCacheModel.Id = getId();

		String Id = serviceRequestMasterCacheModel.Id;

		if ((Id != null) && (Id.length() == 0)) {
			serviceRequestMasterCacheModel.Id = null;
		}

		serviceRequestMasterCacheModel.Type = getType();

		String Type = serviceRequestMasterCacheModel.Type;

		if ((Type != null) && (Type.length() == 0)) {
			serviceRequestMasterCacheModel.Type = null;
		}

		serviceRequestMasterCacheModel.ContactId = getContactId();

		String ContactId = serviceRequestMasterCacheModel.ContactId;

		if ((ContactId != null) && (ContactId.length() == 0)) {
			serviceRequestMasterCacheModel.ContactId = null;
		}

		serviceRequestMasterCacheModel.addressTypeId = getAddressTypeId();

		String addressTypeId = serviceRequestMasterCacheModel.addressTypeId;

		if ((addressTypeId != null) && (addressTypeId.length() == 0)) {
			serviceRequestMasterCacheModel.addressTypeId = null;
		}

		serviceRequestMasterCacheModel.address = getAddress();

		String address = serviceRequestMasterCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			serviceRequestMasterCacheModel.address = null;
		}

		serviceRequestMasterCacheModel.PolicyNo = getPolicyNo();

		serviceRequestMasterCacheModel.MobileNo = getMobileNo();

		String MobileNo = serviceRequestMasterCacheModel.MobileNo;

		if ((MobileNo != null) && (MobileNo.length() == 0)) {
			serviceRequestMasterCacheModel.MobileNo = null;
		}

		serviceRequestMasterCacheModel.description = getDescription();

		String description = serviceRequestMasterCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			serviceRequestMasterCacheModel.description = null;
		}

		Date startPreferedTime = getStartPreferedTime();

		if (startPreferedTime != null) {
			serviceRequestMasterCacheModel.startPreferedTime = startPreferedTime.getTime();
		}
		else {
			serviceRequestMasterCacheModel.startPreferedTime = Long.MIN_VALUE;
		}

		Date endPreferedTime = getEndPreferedTime();

		if (endPreferedTime != null) {
			serviceRequestMasterCacheModel.endPreferedTime = endPreferedTime.getTime();
		}
		else {
			serviceRequestMasterCacheModel.endPreferedTime = Long.MIN_VALUE;
		}

		Date PreferedDate = getPreferedDate();

		if (PreferedDate != null) {
			serviceRequestMasterCacheModel.PreferedDate = PreferedDate.getTime();
		}
		else {
			serviceRequestMasterCacheModel.PreferedDate = Long.MIN_VALUE;
		}

		return serviceRequestMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Type=");
		sb.append(getType());
		sb.append(", ContactId=");
		sb.append(getContactId());
		sb.append(", addressTypeId=");
		sb.append(getAddressTypeId());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", PolicyNo=");
		sb.append(getPolicyNo());
		sb.append(", MobileNo=");
		sb.append(getMobileNo());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startPreferedTime=");
		sb.append(getStartPreferedTime());
		sb.append(", endPreferedTime=");
		sb.append(getEndPreferedTime());
		sb.append(", PreferedDate=");
		sb.append(getPreferedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.ServiceRequestMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ContactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressTypeId</column-name><column-value><![CDATA[");
		sb.append(getAddressTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PolicyNo</column-name><column-value><![CDATA[");
		sb.append(getPolicyNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MobileNo</column-name><column-value><![CDATA[");
		sb.append(getMobileNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startPreferedTime</column-name><column-value><![CDATA[");
		sb.append(getStartPreferedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endPreferedTime</column-name><column-value><![CDATA[");
		sb.append(getEndPreferedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PreferedDate</column-name><column-value><![CDATA[");
		sb.append(getPreferedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceRequestMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceRequestMaster.class
		};
	private String _Id;
	private String _Type;
	private String _ContactId;
	private String _addressTypeId;
	private String _address;
	private int _PolicyNo;
	private String _MobileNo;
	private String _description;
	private Date _startPreferedTime;
	private Date _endPreferedTime;
	private Date _PreferedDate;
	private ServiceRequestMaster _escapedModel;
}