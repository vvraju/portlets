/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PolicyFundSwitchCounter;
import com.ifli.rapid.model.PolicyFundSwitchCounterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PolicyFundSwitchCounter service. Represents a row in the &quot;policy_fund_switch_counter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PolicyFundSwitchCounterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyFundSwitchCounterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PolicyFundSwitchCounterImpl
 * @see com.ifli.rapid.model.PolicyFundSwitchCounter
 * @see com.ifli.rapid.model.PolicyFundSwitchCounterModel
 * @generated
 */
public class PolicyFundSwitchCounterModelImpl extends BaseModelImpl<PolicyFundSwitchCounter>
	implements PolicyFundSwitchCounterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy fund switch counter model instance should use the {@link com.ifli.rapid.model.PolicyFundSwitchCounter} interface instead.
	 */
	public static final String TABLE_NAME = "policy_fund_switch_counter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "POLICY_ID", Types.VARCHAR },
			{ "FUND_SWITCH_COUNTER", Types.INTEGER },
			{ "FUND_SWITCH_YEAR", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table policy_fund_switch_counter (POLICY_ID VARCHAR(75) not null primary key,FUND_SWITCH_COUNTER INTEGER,FUND_SWITCH_YEAR DATE null)";
	public static final String TABLE_SQL_DROP = "drop table policy_fund_switch_counter";
	public static final String ORDER_BY_JPQL = " ORDER BY policyFundSwitchCounter.POLICY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY policy_fund_switch_counter.POLICY_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PolicyFundSwitchCounter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PolicyFundSwitchCounter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PolicyFundSwitchCounter"));

	public PolicyFundSwitchCounterModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _POLICY_ID;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPOLICY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _POLICY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyFundSwitchCounter.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyFundSwitchCounter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("POLICY_ID", getPOLICY_ID());
		attributes.put("FUND_SWITCH_COUNTER", getFUND_SWITCH_COUNTER());
		attributes.put("FUND_SWITCH_YEAR", getFUND_SWITCH_YEAR());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String POLICY_ID = (String)attributes.get("POLICY_ID");

		if (POLICY_ID != null) {
			setPOLICY_ID(POLICY_ID);
		}

		Integer FUND_SWITCH_COUNTER = (Integer)attributes.get(
				"FUND_SWITCH_COUNTER");

		if (FUND_SWITCH_COUNTER != null) {
			setFUND_SWITCH_COUNTER(FUND_SWITCH_COUNTER);
		}

		Date FUND_SWITCH_YEAR = (Date)attributes.get("FUND_SWITCH_YEAR");

		if (FUND_SWITCH_YEAR != null) {
			setFUND_SWITCH_YEAR(FUND_SWITCH_YEAR);
		}
	}

	@Override
	public String getPOLICY_ID() {
		if (_POLICY_ID == null) {
			return StringPool.BLANK;
		}
		else {
			return _POLICY_ID;
		}
	}

	@Override
	public void setPOLICY_ID(String POLICY_ID) {
		_POLICY_ID = POLICY_ID;
	}

	@Override
	public int getFUND_SWITCH_COUNTER() {
		return _FUND_SWITCH_COUNTER;
	}

	@Override
	public void setFUND_SWITCH_COUNTER(int FUND_SWITCH_COUNTER) {
		_FUND_SWITCH_COUNTER = FUND_SWITCH_COUNTER;
	}

	@Override
	public Date getFUND_SWITCH_YEAR() {
		return _FUND_SWITCH_YEAR;
	}

	@Override
	public void setFUND_SWITCH_YEAR(Date FUND_SWITCH_YEAR) {
		_FUND_SWITCH_YEAR = FUND_SWITCH_YEAR;
	}

	@Override
	public PolicyFundSwitchCounter toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PolicyFundSwitchCounter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyFundSwitchCounterImpl policyFundSwitchCounterImpl = new PolicyFundSwitchCounterImpl();

		policyFundSwitchCounterImpl.setPOLICY_ID(getPOLICY_ID());
		policyFundSwitchCounterImpl.setFUND_SWITCH_COUNTER(getFUND_SWITCH_COUNTER());
		policyFundSwitchCounterImpl.setFUND_SWITCH_YEAR(getFUND_SWITCH_YEAR());

		policyFundSwitchCounterImpl.resetOriginalValues();

		return policyFundSwitchCounterImpl;
	}

	@Override
	public int compareTo(PolicyFundSwitchCounter policyFundSwitchCounter) {
		String primaryKey = policyFundSwitchCounter.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PolicyFundSwitchCounter)) {
			return false;
		}

		PolicyFundSwitchCounter policyFundSwitchCounter = (PolicyFundSwitchCounter)obj;

		String primaryKey = policyFundSwitchCounter.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PolicyFundSwitchCounter> toCacheModel() {
		PolicyFundSwitchCounterCacheModel policyFundSwitchCounterCacheModel = new PolicyFundSwitchCounterCacheModel();

		policyFundSwitchCounterCacheModel.POLICY_ID = getPOLICY_ID();

		String POLICY_ID = policyFundSwitchCounterCacheModel.POLICY_ID;

		if ((POLICY_ID != null) && (POLICY_ID.length() == 0)) {
			policyFundSwitchCounterCacheModel.POLICY_ID = null;
		}

		policyFundSwitchCounterCacheModel.FUND_SWITCH_COUNTER = getFUND_SWITCH_COUNTER();

		Date FUND_SWITCH_YEAR = getFUND_SWITCH_YEAR();

		if (FUND_SWITCH_YEAR != null) {
			policyFundSwitchCounterCacheModel.FUND_SWITCH_YEAR = FUND_SWITCH_YEAR.getTime();
		}
		else {
			policyFundSwitchCounterCacheModel.FUND_SWITCH_YEAR = Long.MIN_VALUE;
		}

		return policyFundSwitchCounterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{POLICY_ID=");
		sb.append(getPOLICY_ID());
		sb.append(", FUND_SWITCH_COUNTER=");
		sb.append(getFUND_SWITCH_COUNTER());
		sb.append(", FUND_SWITCH_YEAR=");
		sb.append(getFUND_SWITCH_YEAR());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PolicyFundSwitchCounter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>POLICY_ID</column-name><column-value><![CDATA[");
		sb.append(getPOLICY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_SWITCH_COUNTER</column-name><column-value><![CDATA[");
		sb.append(getFUND_SWITCH_COUNTER());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_SWITCH_YEAR</column-name><column-value><![CDATA[");
		sb.append(getFUND_SWITCH_YEAR());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PolicyFundSwitchCounter.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PolicyFundSwitchCounter.class
		};
	private String _POLICY_ID;
	private int _FUND_SWITCH_COUNTER;
	private Date _FUND_SWITCH_YEAR;
	private PolicyFundSwitchCounter _escapedModel;
}