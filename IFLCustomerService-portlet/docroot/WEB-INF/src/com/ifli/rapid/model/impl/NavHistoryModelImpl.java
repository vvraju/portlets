/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.NavHistory;
import com.ifli.rapid.model.NavHistoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NavHistory service. Represents a row in the &quot;nav_history&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.NavHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NavHistoryImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see NavHistoryImpl
 * @see com.ifli.rapid.model.NavHistory
 * @see com.ifli.rapid.model.NavHistoryModel
 * @generated
 */
public class NavHistoryModelImpl extends BaseModelImpl<NavHistory>
	implements NavHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nav history model instance should use the {@link com.ifli.rapid.model.NavHistory} interface instead.
	 */
	public static final String TABLE_NAME = "nav_history";
	public static final Object[][] TABLE_COLUMNS = {
			{ "NAV_HISTORY_ID", Types.BIGINT },
			{ "DATE", Types.TIMESTAMP },
			{ "NAV", Types.DOUBLE },
			{ "SALE_PRICE", Types.DOUBLE },
			{ "PURCHASE_PRICE", Types.DOUBLE },
			{ "FUND_CODE", Types.VARCHAR },
			{ "FUND_NAME", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table nav_history (NAV_HISTORY_ID LONG not null primary key IDENTITY,DATE DATE null,NAV DOUBLE,SALE_PRICE DOUBLE,PURCHASE_PRICE DOUBLE,FUND_CODE VARCHAR(75) null,FUND_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table nav_history";
	public static final String ORDER_BY_JPQL = " ORDER BY navHistory.NAV_HISTORY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nav_history.NAV_HISTORY_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.NavHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.NavHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.NavHistory"));

	public NavHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _NAV_HISTORY_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNAV_HISTORY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _NAV_HISTORY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NavHistory.class;
	}

	@Override
	public String getModelClassName() {
		return NavHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("NAV_HISTORY_ID", getNAV_HISTORY_ID());
		attributes.put("DATE", getDATE());
		attributes.put("NAV", getNAV());
		attributes.put("SALE_PRICE", getSALE_PRICE());
		attributes.put("PURCHASE_PRICE", getPURCHASE_PRICE());
		attributes.put("FUND_CODE", getFUND_CODE());
		attributes.put("FUND_NAME", getFUND_NAME());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long NAV_HISTORY_ID = (Long)attributes.get("NAV_HISTORY_ID");

		if (NAV_HISTORY_ID != null) {
			setNAV_HISTORY_ID(NAV_HISTORY_ID);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}

		Double NAV = (Double)attributes.get("NAV");

		if (NAV != null) {
			setNAV(NAV);
		}

		Double SALE_PRICE = (Double)attributes.get("SALE_PRICE");

		if (SALE_PRICE != null) {
			setSALE_PRICE(SALE_PRICE);
		}

		Double PURCHASE_PRICE = (Double)attributes.get("PURCHASE_PRICE");

		if (PURCHASE_PRICE != null) {
			setPURCHASE_PRICE(PURCHASE_PRICE);
		}

		String FUND_CODE = (String)attributes.get("FUND_CODE");

		if (FUND_CODE != null) {
			setFUND_CODE(FUND_CODE);
		}

		String FUND_NAME = (String)attributes.get("FUND_NAME");

		if (FUND_NAME != null) {
			setFUND_NAME(FUND_NAME);
		}
	}

	@Override
	public long getNAV_HISTORY_ID() {
		return _NAV_HISTORY_ID;
	}

	@Override
	public void setNAV_HISTORY_ID(long NAV_HISTORY_ID) {
		_NAV_HISTORY_ID = NAV_HISTORY_ID;
	}

	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_DATE = DATE;
	}

	@Override
	public double getNAV() {
		return _NAV;
	}

	@Override
	public void setNAV(double NAV) {
		_NAV = NAV;
	}

	@Override
	public double getSALE_PRICE() {
		return _SALE_PRICE;
	}

	@Override
	public void setSALE_PRICE(double SALE_PRICE) {
		_SALE_PRICE = SALE_PRICE;
	}

	@Override
	public double getPURCHASE_PRICE() {
		return _PURCHASE_PRICE;
	}

	@Override
	public void setPURCHASE_PRICE(double PURCHASE_PRICE) {
		_PURCHASE_PRICE = PURCHASE_PRICE;
	}

	@Override
	public String getFUND_CODE() {
		if (_FUND_CODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _FUND_CODE;
		}
	}

	@Override
	public void setFUND_CODE(String FUND_CODE) {
		_FUND_CODE = FUND_CODE;
	}

	@Override
	public String getFUND_NAME() {
		if (_FUND_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _FUND_NAME;
		}
	}

	@Override
	public void setFUND_NAME(String FUND_NAME) {
		_FUND_NAME = FUND_NAME;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NavHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NavHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NavHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NavHistoryImpl navHistoryImpl = new NavHistoryImpl();

		navHistoryImpl.setNAV_HISTORY_ID(getNAV_HISTORY_ID());
		navHistoryImpl.setDATE(getDATE());
		navHistoryImpl.setNAV(getNAV());
		navHistoryImpl.setSALE_PRICE(getSALE_PRICE());
		navHistoryImpl.setPURCHASE_PRICE(getPURCHASE_PRICE());
		navHistoryImpl.setFUND_CODE(getFUND_CODE());
		navHistoryImpl.setFUND_NAME(getFUND_NAME());

		navHistoryImpl.resetOriginalValues();

		return navHistoryImpl;
	}

	@Override
	public int compareTo(NavHistory navHistory) {
		long primaryKey = navHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NavHistory)) {
			return false;
		}

		NavHistory navHistory = (NavHistory)obj;

		long primaryKey = navHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NavHistory> toCacheModel() {
		NavHistoryCacheModel navHistoryCacheModel = new NavHistoryCacheModel();

		navHistoryCacheModel.NAV_HISTORY_ID = getNAV_HISTORY_ID();

		Date DATE = getDATE();

		if (DATE != null) {
			navHistoryCacheModel.DATE = DATE.getTime();
		}
		else {
			navHistoryCacheModel.DATE = Long.MIN_VALUE;
		}

		navHistoryCacheModel.NAV = getNAV();

		navHistoryCacheModel.SALE_PRICE = getSALE_PRICE();

		navHistoryCacheModel.PURCHASE_PRICE = getPURCHASE_PRICE();

		navHistoryCacheModel.FUND_CODE = getFUND_CODE();

		String FUND_CODE = navHistoryCacheModel.FUND_CODE;

		if ((FUND_CODE != null) && (FUND_CODE.length() == 0)) {
			navHistoryCacheModel.FUND_CODE = null;
		}

		navHistoryCacheModel.FUND_NAME = getFUND_NAME();

		String FUND_NAME = navHistoryCacheModel.FUND_NAME;

		if ((FUND_NAME != null) && (FUND_NAME.length() == 0)) {
			navHistoryCacheModel.FUND_NAME = null;
		}

		return navHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{NAV_HISTORY_ID=");
		sb.append(getNAV_HISTORY_ID());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append(", NAV=");
		sb.append(getNAV());
		sb.append(", SALE_PRICE=");
		sb.append(getSALE_PRICE());
		sb.append(", PURCHASE_PRICE=");
		sb.append(getPURCHASE_PRICE());
		sb.append(", FUND_CODE=");
		sb.append(getFUND_CODE());
		sb.append(", FUND_NAME=");
		sb.append(getFUND_NAME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.NavHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>NAV_HISTORY_ID</column-name><column-value><![CDATA[");
		sb.append(getNAV_HISTORY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NAV</column-name><column-value><![CDATA[");
		sb.append(getNAV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SALE_PRICE</column-name><column-value><![CDATA[");
		sb.append(getSALE_PRICE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PURCHASE_PRICE</column-name><column-value><![CDATA[");
		sb.append(getPURCHASE_PRICE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_CODE</column-name><column-value><![CDATA[");
		sb.append(getFUND_CODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_NAME</column-name><column-value><![CDATA[");
		sb.append(getFUND_NAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NavHistory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NavHistory.class
		};
	private long _NAV_HISTORY_ID;
	private Date _DATE;
	private double _NAV;
	private double _SALE_PRICE;
	private double _PURCHASE_PRICE;
	private String _FUND_CODE;
	private String _FUND_NAME;
	private NavHistory _escapedModel;
}