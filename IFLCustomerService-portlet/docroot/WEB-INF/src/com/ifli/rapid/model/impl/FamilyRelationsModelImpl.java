/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.FamilyRelations;
import com.ifli.rapid.model.FamilyRelationsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FamilyRelations service. Represents a row in the &quot;family_relations&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.FamilyRelationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FamilyRelationsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see FamilyRelationsImpl
 * @see com.ifli.rapid.model.FamilyRelations
 * @see com.ifli.rapid.model.FamilyRelationsModel
 * @generated
 */
public class FamilyRelationsModelImpl extends BaseModelImpl<FamilyRelations>
	implements FamilyRelationsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a family relations model instance should use the {@link com.ifli.rapid.model.FamilyRelations} interface instead.
	 */
	public static final String TABLE_NAME = "family_relations";
	public static final Object[][] TABLE_COLUMNS = {
			{ "RELATION_ID", Types.INTEGER },
			{ "RELATION_NAME", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table family_relations (RELATION_ID INTEGER not null primary key,RELATION_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table family_relations";
	public static final String ORDER_BY_JPQL = " ORDER BY familyRelations.RELATION_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY family_relations.RELATION_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.FamilyRelations"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.FamilyRelations"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.FamilyRelations"));

	public FamilyRelationsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _RELATION_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRELATION_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _RELATION_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FamilyRelations.class;
	}

	@Override
	public String getModelClassName() {
		return FamilyRelations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("RELATION_ID", getRELATION_ID());
		attributes.put("RELATION_NAME", getRELATION_NAME());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer RELATION_ID = (Integer)attributes.get("RELATION_ID");

		if (RELATION_ID != null) {
			setRELATION_ID(RELATION_ID);
		}

		String RELATION_NAME = (String)attributes.get("RELATION_NAME");

		if (RELATION_NAME != null) {
			setRELATION_NAME(RELATION_NAME);
		}
	}

	@Override
	public int getRELATION_ID() {
		return _RELATION_ID;
	}

	@Override
	public void setRELATION_ID(int RELATION_ID) {
		_RELATION_ID = RELATION_ID;
	}

	@Override
	public String getRELATION_NAME() {
		if (_RELATION_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _RELATION_NAME;
		}
	}

	@Override
	public void setRELATION_NAME(String RELATION_NAME) {
		_RELATION_NAME = RELATION_NAME;
	}

	@Override
	public FamilyRelations toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FamilyRelations)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FamilyRelationsImpl familyRelationsImpl = new FamilyRelationsImpl();

		familyRelationsImpl.setRELATION_ID(getRELATION_ID());
		familyRelationsImpl.setRELATION_NAME(getRELATION_NAME());

		familyRelationsImpl.resetOriginalValues();

		return familyRelationsImpl;
	}

	@Override
	public int compareTo(FamilyRelations familyRelations) {
		int primaryKey = familyRelations.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FamilyRelations)) {
			return false;
		}

		FamilyRelations familyRelations = (FamilyRelations)obj;

		int primaryKey = familyRelations.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FamilyRelations> toCacheModel() {
		FamilyRelationsCacheModel familyRelationsCacheModel = new FamilyRelationsCacheModel();

		familyRelationsCacheModel.RELATION_ID = getRELATION_ID();

		familyRelationsCacheModel.RELATION_NAME = getRELATION_NAME();

		String RELATION_NAME = familyRelationsCacheModel.RELATION_NAME;

		if ((RELATION_NAME != null) && (RELATION_NAME.length() == 0)) {
			familyRelationsCacheModel.RELATION_NAME = null;
		}

		return familyRelationsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{RELATION_ID=");
		sb.append(getRELATION_ID());
		sb.append(", RELATION_NAME=");
		sb.append(getRELATION_NAME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.FamilyRelations");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>RELATION_ID</column-name><column-value><![CDATA[");
		sb.append(getRELATION_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RELATION_NAME</column-name><column-value><![CDATA[");
		sb.append(getRELATION_NAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FamilyRelations.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FamilyRelations.class
		};
	private int _RELATION_ID;
	private String _RELATION_NAME;
	private FamilyRelations _escapedModel;
}