/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PolicyAddress;
import com.ifli.rapid.model.PolicyAddressModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PolicyAddress service. Represents a row in the &quot;policy_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PolicyAddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyAddressImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PolicyAddressImpl
 * @see com.ifli.rapid.model.PolicyAddress
 * @see com.ifli.rapid.model.PolicyAddressModel
 * @generated
 */
public class PolicyAddressModelImpl extends BaseModelImpl<PolicyAddress>
	implements PolicyAddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy address model instance should use the {@link com.ifli.rapid.model.PolicyAddress} interface instead.
	 */
	public static final String TABLE_NAME = "policy_address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "POLICY_ID", Types.VARCHAR },
			{ "CUSTOMER_ID", Types.VARCHAR },
			{ "CUSTOMER_ADDRESS_ID", Types.INTEGER },
			{ "PINCODE", Types.VARCHAR },
			{ "CITY", Types.VARCHAR },
			{ "STATE", Types.VARCHAR },
			{ "ADDRESS_LINE_1", Types.VARCHAR },
			{ "ADDRESS_LINE_2", Types.VARCHAR },
			{ "ADDRESS_LINE_3", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table policy_address (ID INTEGER not null primary key,POLICY_ID VARCHAR(75) null,CUSTOMER_ID VARCHAR(75) null,CUSTOMER_ADDRESS_ID INTEGER,PINCODE VARCHAR(75) null,CITY VARCHAR(75) null,STATE VARCHAR(75) null,ADDRESS_LINE_1 VARCHAR(75) null,ADDRESS_LINE_2 VARCHAR(75) null,ADDRESS_LINE_3 VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table policy_address";
	public static final String ORDER_BY_JPQL = " ORDER BY policyAddress.ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY policy_address.ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PolicyAddress"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PolicyAddress"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ifli.rapid.model.PolicyAddress"),
			true);
	public static long POLICY_ID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PolicyAddress"));

	public PolicyAddressModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyAddress.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("POLICY_ID", getPOLICY_ID());
		attributes.put("CUSTOMER_ID", getCUSTOMER_ID());
		attributes.put("CUSTOMER_ADDRESS_ID", getCUSTOMER_ADDRESS_ID());
		attributes.put("PINCODE", getPINCODE());
		attributes.put("CITY", getCITY());
		attributes.put("STATE", getSTATE());
		attributes.put("ADDRESS_LINE_1", getADDRESS_LINE_1());
		attributes.put("ADDRESS_LINE_2", getADDRESS_LINE_2());
		attributes.put("ADDRESS_LINE_3", getADDRESS_LINE_3());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ID = (Integer)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		String POLICY_ID = (String)attributes.get("POLICY_ID");

		if (POLICY_ID != null) {
			setPOLICY_ID(POLICY_ID);
		}

		String CUSTOMER_ID = (String)attributes.get("CUSTOMER_ID");

		if (CUSTOMER_ID != null) {
			setCUSTOMER_ID(CUSTOMER_ID);
		}

		Integer CUSTOMER_ADDRESS_ID = (Integer)attributes.get(
				"CUSTOMER_ADDRESS_ID");

		if (CUSTOMER_ADDRESS_ID != null) {
			setCUSTOMER_ADDRESS_ID(CUSTOMER_ADDRESS_ID);
		}

		String PINCODE = (String)attributes.get("PINCODE");

		if (PINCODE != null) {
			setPINCODE(PINCODE);
		}

		String CITY = (String)attributes.get("CITY");

		if (CITY != null) {
			setCITY(CITY);
		}

		String STATE = (String)attributes.get("STATE");

		if (STATE != null) {
			setSTATE(STATE);
		}

		String ADDRESS_LINE_1 = (String)attributes.get("ADDRESS_LINE_1");

		if (ADDRESS_LINE_1 != null) {
			setADDRESS_LINE_1(ADDRESS_LINE_1);
		}

		String ADDRESS_LINE_2 = (String)attributes.get("ADDRESS_LINE_2");

		if (ADDRESS_LINE_2 != null) {
			setADDRESS_LINE_2(ADDRESS_LINE_2);
		}

		String ADDRESS_LINE_3 = (String)attributes.get("ADDRESS_LINE_3");

		if (ADDRESS_LINE_3 != null) {
			setADDRESS_LINE_3(ADDRESS_LINE_3);
		}
	}

	@Override
	public int getID() {
		return _ID;
	}

	@Override
	public void setID(int ID) {
		_ID = ID;
	}

	@Override
	public String getPOLICY_ID() {
		if (_POLICY_ID == null) {
			return StringPool.BLANK;
		}
		else {
			return _POLICY_ID;
		}
	}

	@Override
	public void setPOLICY_ID(String POLICY_ID) {
		_columnBitmask |= POLICY_ID_COLUMN_BITMASK;

		if (_originalPOLICY_ID == null) {
			_originalPOLICY_ID = _POLICY_ID;
		}

		_POLICY_ID = POLICY_ID;
	}

	public String getOriginalPOLICY_ID() {
		return GetterUtil.getString(_originalPOLICY_ID);
	}

	@Override
	public String getCUSTOMER_ID() {
		if (_CUSTOMER_ID == null) {
			return StringPool.BLANK;
		}
		else {
			return _CUSTOMER_ID;
		}
	}

	@Override
	public void setCUSTOMER_ID(String CUSTOMER_ID) {
		_CUSTOMER_ID = CUSTOMER_ID;
	}

	@Override
	public int getCUSTOMER_ADDRESS_ID() {
		return _CUSTOMER_ADDRESS_ID;
	}

	@Override
	public void setCUSTOMER_ADDRESS_ID(int CUSTOMER_ADDRESS_ID) {
		_CUSTOMER_ADDRESS_ID = CUSTOMER_ADDRESS_ID;
	}

	@Override
	public String getPINCODE() {
		if (_PINCODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _PINCODE;
		}
	}

	@Override
	public void setPINCODE(String PINCODE) {
		_PINCODE = PINCODE;
	}

	@Override
	public String getCITY() {
		if (_CITY == null) {
			return StringPool.BLANK;
		}
		else {
			return _CITY;
		}
	}

	@Override
	public void setCITY(String CITY) {
		_CITY = CITY;
	}

	@Override
	public String getSTATE() {
		if (_STATE == null) {
			return StringPool.BLANK;
		}
		else {
			return _STATE;
		}
	}

	@Override
	public void setSTATE(String STATE) {
		_STATE = STATE;
	}

	@Override
	public String getADDRESS_LINE_1() {
		if (_ADDRESS_LINE_1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ADDRESS_LINE_1;
		}
	}

	@Override
	public void setADDRESS_LINE_1(String ADDRESS_LINE_1) {
		_ADDRESS_LINE_1 = ADDRESS_LINE_1;
	}

	@Override
	public String getADDRESS_LINE_2() {
		if (_ADDRESS_LINE_2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ADDRESS_LINE_2;
		}
	}

	@Override
	public void setADDRESS_LINE_2(String ADDRESS_LINE_2) {
		_ADDRESS_LINE_2 = ADDRESS_LINE_2;
	}

	@Override
	public String getADDRESS_LINE_3() {
		if (_ADDRESS_LINE_3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ADDRESS_LINE_3;
		}
	}

	@Override
	public void setADDRESS_LINE_3(String ADDRESS_LINE_3) {
		_ADDRESS_LINE_3 = ADDRESS_LINE_3;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PolicyAddress toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PolicyAddress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyAddressImpl policyAddressImpl = new PolicyAddressImpl();

		policyAddressImpl.setID(getID());
		policyAddressImpl.setPOLICY_ID(getPOLICY_ID());
		policyAddressImpl.setCUSTOMER_ID(getCUSTOMER_ID());
		policyAddressImpl.setCUSTOMER_ADDRESS_ID(getCUSTOMER_ADDRESS_ID());
		policyAddressImpl.setPINCODE(getPINCODE());
		policyAddressImpl.setCITY(getCITY());
		policyAddressImpl.setSTATE(getSTATE());
		policyAddressImpl.setADDRESS_LINE_1(getADDRESS_LINE_1());
		policyAddressImpl.setADDRESS_LINE_2(getADDRESS_LINE_2());
		policyAddressImpl.setADDRESS_LINE_3(getADDRESS_LINE_3());

		policyAddressImpl.resetOriginalValues();

		return policyAddressImpl;
	}

	@Override
	public int compareTo(PolicyAddress policyAddress) {
		int primaryKey = policyAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PolicyAddress)) {
			return false;
		}

		PolicyAddress policyAddress = (PolicyAddress)obj;

		int primaryKey = policyAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PolicyAddressModelImpl policyAddressModelImpl = this;

		policyAddressModelImpl._originalPOLICY_ID = policyAddressModelImpl._POLICY_ID;

		policyAddressModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PolicyAddress> toCacheModel() {
		PolicyAddressCacheModel policyAddressCacheModel = new PolicyAddressCacheModel();

		policyAddressCacheModel.ID = getID();

		policyAddressCacheModel.POLICY_ID = getPOLICY_ID();

		String POLICY_ID = policyAddressCacheModel.POLICY_ID;

		if ((POLICY_ID != null) && (POLICY_ID.length() == 0)) {
			policyAddressCacheModel.POLICY_ID = null;
		}

		policyAddressCacheModel.CUSTOMER_ID = getCUSTOMER_ID();

		String CUSTOMER_ID = policyAddressCacheModel.CUSTOMER_ID;

		if ((CUSTOMER_ID != null) && (CUSTOMER_ID.length() == 0)) {
			policyAddressCacheModel.CUSTOMER_ID = null;
		}

		policyAddressCacheModel.CUSTOMER_ADDRESS_ID = getCUSTOMER_ADDRESS_ID();

		policyAddressCacheModel.PINCODE = getPINCODE();

		String PINCODE = policyAddressCacheModel.PINCODE;

		if ((PINCODE != null) && (PINCODE.length() == 0)) {
			policyAddressCacheModel.PINCODE = null;
		}

		policyAddressCacheModel.CITY = getCITY();

		String CITY = policyAddressCacheModel.CITY;

		if ((CITY != null) && (CITY.length() == 0)) {
			policyAddressCacheModel.CITY = null;
		}

		policyAddressCacheModel.STATE = getSTATE();

		String STATE = policyAddressCacheModel.STATE;

		if ((STATE != null) && (STATE.length() == 0)) {
			policyAddressCacheModel.STATE = null;
		}

		policyAddressCacheModel.ADDRESS_LINE_1 = getADDRESS_LINE_1();

		String ADDRESS_LINE_1 = policyAddressCacheModel.ADDRESS_LINE_1;

		if ((ADDRESS_LINE_1 != null) && (ADDRESS_LINE_1.length() == 0)) {
			policyAddressCacheModel.ADDRESS_LINE_1 = null;
		}

		policyAddressCacheModel.ADDRESS_LINE_2 = getADDRESS_LINE_2();

		String ADDRESS_LINE_2 = policyAddressCacheModel.ADDRESS_LINE_2;

		if ((ADDRESS_LINE_2 != null) && (ADDRESS_LINE_2.length() == 0)) {
			policyAddressCacheModel.ADDRESS_LINE_2 = null;
		}

		policyAddressCacheModel.ADDRESS_LINE_3 = getADDRESS_LINE_3();

		String ADDRESS_LINE_3 = policyAddressCacheModel.ADDRESS_LINE_3;

		if ((ADDRESS_LINE_3 != null) && (ADDRESS_LINE_3.length() == 0)) {
			policyAddressCacheModel.ADDRESS_LINE_3 = null;
		}

		return policyAddressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", POLICY_ID=");
		sb.append(getPOLICY_ID());
		sb.append(", CUSTOMER_ID=");
		sb.append(getCUSTOMER_ID());
		sb.append(", CUSTOMER_ADDRESS_ID=");
		sb.append(getCUSTOMER_ADDRESS_ID());
		sb.append(", PINCODE=");
		sb.append(getPINCODE());
		sb.append(", CITY=");
		sb.append(getCITY());
		sb.append(", STATE=");
		sb.append(getSTATE());
		sb.append(", ADDRESS_LINE_1=");
		sb.append(getADDRESS_LINE_1());
		sb.append(", ADDRESS_LINE_2=");
		sb.append(getADDRESS_LINE_2());
		sb.append(", ADDRESS_LINE_3=");
		sb.append(getADDRESS_LINE_3());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PolicyAddress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>POLICY_ID</column-name><column-value><![CDATA[");
		sb.append(getPOLICY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CUSTOMER_ID</column-name><column-value><![CDATA[");
		sb.append(getCUSTOMER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CUSTOMER_ADDRESS_ID</column-name><column-value><![CDATA[");
		sb.append(getCUSTOMER_ADDRESS_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PINCODE</column-name><column-value><![CDATA[");
		sb.append(getPINCODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CITY</column-name><column-value><![CDATA[");
		sb.append(getCITY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATE</column-name><column-value><![CDATA[");
		sb.append(getSTATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ADDRESS_LINE_1</column-name><column-value><![CDATA[");
		sb.append(getADDRESS_LINE_1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ADDRESS_LINE_2</column-name><column-value><![CDATA[");
		sb.append(getADDRESS_LINE_2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ADDRESS_LINE_3</column-name><column-value><![CDATA[");
		sb.append(getADDRESS_LINE_3());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PolicyAddress.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PolicyAddress.class
		};
	private int _ID;
	private String _POLICY_ID;
	private String _originalPOLICY_ID;
	private String _CUSTOMER_ID;
	private int _CUSTOMER_ADDRESS_ID;
	private String _PINCODE;
	private String _CITY;
	private String _STATE;
	private String _ADDRESS_LINE_1;
	private String _ADDRESS_LINE_2;
	private String _ADDRESS_LINE_3;
	private long _columnBitmask;
	private PolicyAddress _escapedModel;
}