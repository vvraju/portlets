/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PremiumType;
import com.ifli.rapid.model.PremiumTypeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PremiumType service. Represents a row in the &quot;PremiumType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PremiumTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PremiumTypeImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PremiumTypeImpl
 * @see com.ifli.rapid.model.PremiumType
 * @see com.ifli.rapid.model.PremiumTypeModel
 * @generated
 */
public class PremiumTypeModelImpl extends BaseModelImpl<PremiumType>
	implements PremiumTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a premium type model instance should use the {@link com.ifli.rapid.model.PremiumType} interface instead.
	 */
	public static final String TABLE_NAME = "PremiumType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.VARCHAR },
			{ "Name", Types.VARCHAR },
			{ "Active", Types.BOOLEAN },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "Priority", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table PremiumType (Id VARCHAR(75) not null primary key IDENTITY,Name VARCHAR(75) null,Active BOOLEAN,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,Priority INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PremiumType";
	public static final String ORDER_BY_JPQL = " ORDER BY premiumType.Priority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PremiumType.Priority ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PremiumType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PremiumType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PremiumType"));

	public PremiumTypeModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PremiumType.class;
	}

	@Override
	public String getModelClassName() {
		return PremiumType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("Name", getName());
		attributes.put("Active", getActive());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("Priority", getPriority());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String Id = (String)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}

		Boolean Active = (Boolean)attributes.get("Active");

		if (Active != null) {
			setActive(Active);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		Integer Priority = (Integer)attributes.get("Priority");

		if (Priority != null) {
			setPriority(Priority);
		}
	}

	@Override
	public String getId() {
		if (_Id == null) {
			return StringPool.BLANK;
		}
		else {
			return _Id;
		}
	}

	@Override
	public void setId(String Id) {
		_Id = Id;
	}

	@Override
	public String getName() {
		if (_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _Name;
		}
	}

	@Override
	public void setName(String Name) {
		_Name = Name;
	}

	@Override
	public boolean getActive() {
		return _Active;
	}

	@Override
	public boolean isActive() {
		return _Active;
	}

	@Override
	public void setActive(boolean Active) {
		_Active = Active;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public int getPriority() {
		return _Priority;
	}

	@Override
	public void setPriority(int Priority) {
		_Priority = Priority;
	}

	@Override
	public PremiumType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PremiumType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PremiumTypeImpl premiumTypeImpl = new PremiumTypeImpl();

		premiumTypeImpl.setId(getId());
		premiumTypeImpl.setName(getName());
		premiumTypeImpl.setActive(getActive());
		premiumTypeImpl.setCreatedBy(getCreatedBy());
		premiumTypeImpl.setCreatedDate(getCreatedDate());
		premiumTypeImpl.setModifiedBy(getModifiedBy());
		premiumTypeImpl.setModifiedDate(getModifiedDate());
		premiumTypeImpl.setPriority(getPriority());

		premiumTypeImpl.resetOriginalValues();

		return premiumTypeImpl;
	}

	@Override
	public int compareTo(PremiumType premiumType) {
		int value = 0;

		if (getPriority() < premiumType.getPriority()) {
			value = -1;
		}
		else if (getPriority() > premiumType.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PremiumType)) {
			return false;
		}

		PremiumType premiumType = (PremiumType)obj;

		String primaryKey = premiumType.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PremiumType> toCacheModel() {
		PremiumTypeCacheModel premiumTypeCacheModel = new PremiumTypeCacheModel();

		premiumTypeCacheModel.Id = getId();

		String Id = premiumTypeCacheModel.Id;

		if ((Id != null) && (Id.length() == 0)) {
			premiumTypeCacheModel.Id = null;
		}

		premiumTypeCacheModel.Name = getName();

		String Name = premiumTypeCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			premiumTypeCacheModel.Name = null;
		}

		premiumTypeCacheModel.Active = getActive();

		premiumTypeCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = premiumTypeCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			premiumTypeCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			premiumTypeCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			premiumTypeCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		premiumTypeCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = premiumTypeCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			premiumTypeCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			premiumTypeCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			premiumTypeCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		premiumTypeCacheModel.Priority = getPriority();

		return premiumTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Name=");
		sb.append(getName());
		sb.append(", Active=");
		sb.append(getActive());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", Priority=");
		sb.append(getPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PremiumType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PremiumType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PremiumType.class
		};
	private String _Id;
	private String _Name;
	private boolean _Active;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private int _Priority;
	private PremiumType _escapedModel;
}