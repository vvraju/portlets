/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.QRCTeamMaster;
import com.ifli.rapid.model.QRCTeamMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the QRCTeamMaster service. Represents a row in the &quot;QRC_TEAM_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.QRCTeamMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QRCTeamMasterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see QRCTeamMasterImpl
 * @see com.ifli.rapid.model.QRCTeamMaster
 * @see com.ifli.rapid.model.QRCTeamMasterModel
 * @generated
 */
public class QRCTeamMasterModelImpl extends BaseModelImpl<QRCTeamMaster>
	implements QRCTeamMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a q r c team master model instance should use the {@link com.ifli.rapid.model.QRCTeamMaster} interface instead.
	 */
	public static final String TABLE_NAME = "QRC_TEAM_MASTER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "QRC_TM_ID", Types.INTEGER },
			{ "TM_DESC", Types.VARCHAR },
			{ "ACTIVE_FLAG", Types.VARCHAR },
			{ "INSERTED_DATE", Types.TIMESTAMP },
			{ "INSERTED_BY", Types.VARCHAR },
			{ "UPDATED_DATE", Types.TIMESTAMP },
			{ "UPDATED_BY", Types.VARCHAR },
			{ "DELETED_DATE", Types.TIMESTAMP },
			{ "DELETED_BY", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table QRC_TEAM_MASTER (QRC_TM_ID INTEGER not null primary key IDENTITY,TM_DESC VARCHAR(75) null,ACTIVE_FLAG VARCHAR(75) null,INSERTED_DATE DATE null,INSERTED_BY VARCHAR(75) null,UPDATED_DATE DATE null,UPDATED_BY VARCHAR(75) null,DELETED_DATE DATE null,DELETED_BY VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table QRC_TEAM_MASTER";
	public static final String ORDER_BY_JPQL = " ORDER BY qrcTeamMaster.QRC_TM_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY QRC_TEAM_MASTER.QRC_TM_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.QRCTeamMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.QRCTeamMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.QRCTeamMaster"));

	public QRCTeamMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _QRC_TM_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setQRC_TM_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _QRC_TM_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QRCTeamMaster.class;
	}

	@Override
	public String getModelClassName() {
		return QRCTeamMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("QRC_TM_ID", getQRC_TM_ID());
		attributes.put("TM_DESC", getTM_DESC());
		attributes.put("ACTIVE_FLAG", getACTIVE_FLAG());
		attributes.put("INSERTED_DATE", getINSERTED_DATE());
		attributes.put("INSERTED_BY", getINSERTED_BY());
		attributes.put("UPDATED_DATE", getUPDATED_DATE());
		attributes.put("UPDATED_BY", getUPDATED_BY());
		attributes.put("DELETED_DATE", getDELETED_DATE());
		attributes.put("DELETED_BY", getDELETED_BY());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer QRC_TM_ID = (Integer)attributes.get("QRC_TM_ID");

		if (QRC_TM_ID != null) {
			setQRC_TM_ID(QRC_TM_ID);
		}

		String TM_DESC = (String)attributes.get("TM_DESC");

		if (TM_DESC != null) {
			setTM_DESC(TM_DESC);
		}

		String ACTIVE_FLAG = (String)attributes.get("ACTIVE_FLAG");

		if (ACTIVE_FLAG != null) {
			setACTIVE_FLAG(ACTIVE_FLAG);
		}

		Date INSERTED_DATE = (Date)attributes.get("INSERTED_DATE");

		if (INSERTED_DATE != null) {
			setINSERTED_DATE(INSERTED_DATE);
		}

		String INSERTED_BY = (String)attributes.get("INSERTED_BY");

		if (INSERTED_BY != null) {
			setINSERTED_BY(INSERTED_BY);
		}

		Date UPDATED_DATE = (Date)attributes.get("UPDATED_DATE");

		if (UPDATED_DATE != null) {
			setUPDATED_DATE(UPDATED_DATE);
		}

		String UPDATED_BY = (String)attributes.get("UPDATED_BY");

		if (UPDATED_BY != null) {
			setUPDATED_BY(UPDATED_BY);
		}

		Date DELETED_DATE = (Date)attributes.get("DELETED_DATE");

		if (DELETED_DATE != null) {
			setDELETED_DATE(DELETED_DATE);
		}

		String DELETED_BY = (String)attributes.get("DELETED_BY");

		if (DELETED_BY != null) {
			setDELETED_BY(DELETED_BY);
		}
	}

	@Override
	public int getQRC_TM_ID() {
		return _QRC_TM_ID;
	}

	@Override
	public void setQRC_TM_ID(int QRC_TM_ID) {
		_QRC_TM_ID = QRC_TM_ID;
	}

	@Override
	public String getTM_DESC() {
		if (_TM_DESC == null) {
			return StringPool.BLANK;
		}
		else {
			return _TM_DESC;
		}
	}

	@Override
	public void setTM_DESC(String TM_DESC) {
		_TM_DESC = TM_DESC;
	}

	@Override
	public String getACTIVE_FLAG() {
		if (_ACTIVE_FLAG == null) {
			return StringPool.BLANK;
		}
		else {
			return _ACTIVE_FLAG;
		}
	}

	@Override
	public void setACTIVE_FLAG(String ACTIVE_FLAG) {
		_ACTIVE_FLAG = ACTIVE_FLAG;
	}

	@Override
	public Date getINSERTED_DATE() {
		return _INSERTED_DATE;
	}

	@Override
	public void setINSERTED_DATE(Date INSERTED_DATE) {
		_INSERTED_DATE = INSERTED_DATE;
	}

	@Override
	public String getINSERTED_BY() {
		if (_INSERTED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _INSERTED_BY;
		}
	}

	@Override
	public void setINSERTED_BY(String INSERTED_BY) {
		_INSERTED_BY = INSERTED_BY;
	}

	@Override
	public Date getUPDATED_DATE() {
		return _UPDATED_DATE;
	}

	@Override
	public void setUPDATED_DATE(Date UPDATED_DATE) {
		_UPDATED_DATE = UPDATED_DATE;
	}

	@Override
	public String getUPDATED_BY() {
		if (_UPDATED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _UPDATED_BY;
		}
	}

	@Override
	public void setUPDATED_BY(String UPDATED_BY) {
		_UPDATED_BY = UPDATED_BY;
	}

	@Override
	public Date getDELETED_DATE() {
		return _DELETED_DATE;
	}

	@Override
	public void setDELETED_DATE(Date DELETED_DATE) {
		_DELETED_DATE = DELETED_DATE;
	}

	@Override
	public String getDELETED_BY() {
		if (_DELETED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _DELETED_BY;
		}
	}

	@Override
	public void setDELETED_BY(String DELETED_BY) {
		_DELETED_BY = DELETED_BY;
	}

	@Override
	public QRCTeamMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (QRCTeamMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QRCTeamMasterImpl qrcTeamMasterImpl = new QRCTeamMasterImpl();

		qrcTeamMasterImpl.setQRC_TM_ID(getQRC_TM_ID());
		qrcTeamMasterImpl.setTM_DESC(getTM_DESC());
		qrcTeamMasterImpl.setACTIVE_FLAG(getACTIVE_FLAG());
		qrcTeamMasterImpl.setINSERTED_DATE(getINSERTED_DATE());
		qrcTeamMasterImpl.setINSERTED_BY(getINSERTED_BY());
		qrcTeamMasterImpl.setUPDATED_DATE(getUPDATED_DATE());
		qrcTeamMasterImpl.setUPDATED_BY(getUPDATED_BY());
		qrcTeamMasterImpl.setDELETED_DATE(getDELETED_DATE());
		qrcTeamMasterImpl.setDELETED_BY(getDELETED_BY());

		qrcTeamMasterImpl.resetOriginalValues();

		return qrcTeamMasterImpl;
	}

	@Override
	public int compareTo(QRCTeamMaster qrcTeamMaster) {
		int primaryKey = qrcTeamMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof QRCTeamMaster)) {
			return false;
		}

		QRCTeamMaster qrcTeamMaster = (QRCTeamMaster)obj;

		int primaryKey = qrcTeamMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<QRCTeamMaster> toCacheModel() {
		QRCTeamMasterCacheModel qrcTeamMasterCacheModel = new QRCTeamMasterCacheModel();

		qrcTeamMasterCacheModel.QRC_TM_ID = getQRC_TM_ID();

		qrcTeamMasterCacheModel.TM_DESC = getTM_DESC();

		String TM_DESC = qrcTeamMasterCacheModel.TM_DESC;

		if ((TM_DESC != null) && (TM_DESC.length() == 0)) {
			qrcTeamMasterCacheModel.TM_DESC = null;
		}

		qrcTeamMasterCacheModel.ACTIVE_FLAG = getACTIVE_FLAG();

		String ACTIVE_FLAG = qrcTeamMasterCacheModel.ACTIVE_FLAG;

		if ((ACTIVE_FLAG != null) && (ACTIVE_FLAG.length() == 0)) {
			qrcTeamMasterCacheModel.ACTIVE_FLAG = null;
		}

		Date INSERTED_DATE = getINSERTED_DATE();

		if (INSERTED_DATE != null) {
			qrcTeamMasterCacheModel.INSERTED_DATE = INSERTED_DATE.getTime();
		}
		else {
			qrcTeamMasterCacheModel.INSERTED_DATE = Long.MIN_VALUE;
		}

		qrcTeamMasterCacheModel.INSERTED_BY = getINSERTED_BY();

		String INSERTED_BY = qrcTeamMasterCacheModel.INSERTED_BY;

		if ((INSERTED_BY != null) && (INSERTED_BY.length() == 0)) {
			qrcTeamMasterCacheModel.INSERTED_BY = null;
		}

		Date UPDATED_DATE = getUPDATED_DATE();

		if (UPDATED_DATE != null) {
			qrcTeamMasterCacheModel.UPDATED_DATE = UPDATED_DATE.getTime();
		}
		else {
			qrcTeamMasterCacheModel.UPDATED_DATE = Long.MIN_VALUE;
		}

		qrcTeamMasterCacheModel.UPDATED_BY = getUPDATED_BY();

		String UPDATED_BY = qrcTeamMasterCacheModel.UPDATED_BY;

		if ((UPDATED_BY != null) && (UPDATED_BY.length() == 0)) {
			qrcTeamMasterCacheModel.UPDATED_BY = null;
		}

		Date DELETED_DATE = getDELETED_DATE();

		if (DELETED_DATE != null) {
			qrcTeamMasterCacheModel.DELETED_DATE = DELETED_DATE.getTime();
		}
		else {
			qrcTeamMasterCacheModel.DELETED_DATE = Long.MIN_VALUE;
		}

		qrcTeamMasterCacheModel.DELETED_BY = getDELETED_BY();

		String DELETED_BY = qrcTeamMasterCacheModel.DELETED_BY;

		if ((DELETED_BY != null) && (DELETED_BY.length() == 0)) {
			qrcTeamMasterCacheModel.DELETED_BY = null;
		}

		return qrcTeamMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{QRC_TM_ID=");
		sb.append(getQRC_TM_ID());
		sb.append(", TM_DESC=");
		sb.append(getTM_DESC());
		sb.append(", ACTIVE_FLAG=");
		sb.append(getACTIVE_FLAG());
		sb.append(", INSERTED_DATE=");
		sb.append(getINSERTED_DATE());
		sb.append(", INSERTED_BY=");
		sb.append(getINSERTED_BY());
		sb.append(", UPDATED_DATE=");
		sb.append(getUPDATED_DATE());
		sb.append(", UPDATED_BY=");
		sb.append(getUPDATED_BY());
		sb.append(", DELETED_DATE=");
		sb.append(getDELETED_DATE());
		sb.append(", DELETED_BY=");
		sb.append(getDELETED_BY());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.QRCTeamMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>QRC_TM_ID</column-name><column-value><![CDATA[");
		sb.append(getQRC_TM_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TM_DESC</column-name><column-value><![CDATA[");
		sb.append(getTM_DESC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACTIVE_FLAG</column-name><column-value><![CDATA[");
		sb.append(getACTIVE_FLAG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_DATE</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_BY</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_BY</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DELETED_DATE</column-name><column-value><![CDATA[");
		sb.append(getDELETED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DELETED_BY</column-name><column-value><![CDATA[");
		sb.append(getDELETED_BY());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = QRCTeamMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			QRCTeamMaster.class
		};
	private int _QRC_TM_ID;
	private String _TM_DESC;
	private String _ACTIVE_FLAG;
	private Date _INSERTED_DATE;
	private String _INSERTED_BY;
	private Date _UPDATED_DATE;
	private String _UPDATED_BY;
	private Date _DELETED_DATE;
	private String _DELETED_BY;
	private QRCTeamMaster _escapedModel;
}