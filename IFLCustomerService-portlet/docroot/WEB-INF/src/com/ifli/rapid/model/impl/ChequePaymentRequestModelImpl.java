/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.ChequePaymentRequest;
import com.ifli.rapid.model.ChequePaymentRequestModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChequePaymentRequest service. Represents a row in the &quot;ChequePaymentRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.ChequePaymentRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChequePaymentRequestImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see ChequePaymentRequestImpl
 * @see com.ifli.rapid.model.ChequePaymentRequest
 * @see com.ifli.rapid.model.ChequePaymentRequestModel
 * @generated
 */
public class ChequePaymentRequestModelImpl extends BaseModelImpl<ChequePaymentRequest>
	implements ChequePaymentRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cheque payment request model instance should use the {@link com.ifli.rapid.model.ChequePaymentRequest} interface instead.
	 */
	public static final String TABLE_NAME = "ChequePaymentRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ServiceRequestID", Types.VARCHAR },
			{ "ServiceRequestMasterId", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "contactId", Types.VARCHAR },
			{ "startPreferedTime", Types.TIMESTAMP },
			{ "endPreferedTime", Types.TIMESTAMP },
			{ "PreferedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ChequePaymentRequest (ServiceRequestID VARCHAR(75) not null primary key,ServiceRequestMasterId VARCHAR(75) null,description VARCHAR(75) null,contactId VARCHAR(75) null,startPreferedTime DATE null,endPreferedTime DATE null,PreferedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ChequePaymentRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY chequePaymentRequest.ServiceRequestID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ChequePaymentRequest.ServiceRequestID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.ChequePaymentRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.ChequePaymentRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.ChequePaymentRequest"));

	public ChequePaymentRequestModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _ServiceRequestID;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setServiceRequestID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ServiceRequestID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ChequePaymentRequest.class;
	}

	@Override
	public String getModelClassName() {
		return ChequePaymentRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ServiceRequestID", getServiceRequestID());
		attributes.put("ServiceRequestMasterId", getServiceRequestMasterId());
		attributes.put("description", getDescription());
		attributes.put("contactId", getContactId());
		attributes.put("startPreferedTime", getStartPreferedTime());
		attributes.put("endPreferedTime", getEndPreferedTime());
		attributes.put("PreferedDate", getPreferedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String ServiceRequestID = (String)attributes.get("ServiceRequestID");

		if (ServiceRequestID != null) {
			setServiceRequestID(ServiceRequestID);
		}

		String ServiceRequestMasterId = (String)attributes.get(
				"ServiceRequestMasterId");

		if (ServiceRequestMasterId != null) {
			setServiceRequestMasterId(ServiceRequestMasterId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String contactId = (String)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		Date startPreferedTime = (Date)attributes.get("startPreferedTime");

		if (startPreferedTime != null) {
			setStartPreferedTime(startPreferedTime);
		}

		Date endPreferedTime = (Date)attributes.get("endPreferedTime");

		if (endPreferedTime != null) {
			setEndPreferedTime(endPreferedTime);
		}

		Date PreferedDate = (Date)attributes.get("PreferedDate");

		if (PreferedDate != null) {
			setPreferedDate(PreferedDate);
		}
	}

	@Override
	public String getServiceRequestID() {
		if (_ServiceRequestID == null) {
			return StringPool.BLANK;
		}
		else {
			return _ServiceRequestID;
		}
	}

	@Override
	public void setServiceRequestID(String ServiceRequestID) {
		_ServiceRequestID = ServiceRequestID;
	}

	@Override
	public String getServiceRequestMasterId() {
		if (_ServiceRequestMasterId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ServiceRequestMasterId;
		}
	}

	@Override
	public void setServiceRequestMasterId(String ServiceRequestMasterId) {
		_ServiceRequestMasterId = ServiceRequestMasterId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getContactId() {
		if (_contactId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactId;
		}
	}

	@Override
	public void setContactId(String contactId) {
		_contactId = contactId;
	}

	@Override
	public Date getStartPreferedTime() {
		return _startPreferedTime;
	}

	@Override
	public void setStartPreferedTime(Date startPreferedTime) {
		_startPreferedTime = startPreferedTime;
	}

	@Override
	public Date getEndPreferedTime() {
		return _endPreferedTime;
	}

	@Override
	public void setEndPreferedTime(Date endPreferedTime) {
		_endPreferedTime = endPreferedTime;
	}

	@Override
	public Date getPreferedDate() {
		return _PreferedDate;
	}

	@Override
	public void setPreferedDate(Date PreferedDate) {
		_PreferedDate = PreferedDate;
	}

	@Override
	public ChequePaymentRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChequePaymentRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChequePaymentRequestImpl chequePaymentRequestImpl = new ChequePaymentRequestImpl();

		chequePaymentRequestImpl.setServiceRequestID(getServiceRequestID());
		chequePaymentRequestImpl.setServiceRequestMasterId(getServiceRequestMasterId());
		chequePaymentRequestImpl.setDescription(getDescription());
		chequePaymentRequestImpl.setContactId(getContactId());
		chequePaymentRequestImpl.setStartPreferedTime(getStartPreferedTime());
		chequePaymentRequestImpl.setEndPreferedTime(getEndPreferedTime());
		chequePaymentRequestImpl.setPreferedDate(getPreferedDate());

		chequePaymentRequestImpl.resetOriginalValues();

		return chequePaymentRequestImpl;
	}

	@Override
	public int compareTo(ChequePaymentRequest chequePaymentRequest) {
		String primaryKey = chequePaymentRequest.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChequePaymentRequest)) {
			return false;
		}

		ChequePaymentRequest chequePaymentRequest = (ChequePaymentRequest)obj;

		String primaryKey = chequePaymentRequest.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ChequePaymentRequest> toCacheModel() {
		ChequePaymentRequestCacheModel chequePaymentRequestCacheModel = new ChequePaymentRequestCacheModel();

		chequePaymentRequestCacheModel.ServiceRequestID = getServiceRequestID();

		String ServiceRequestID = chequePaymentRequestCacheModel.ServiceRequestID;

		if ((ServiceRequestID != null) && (ServiceRequestID.length() == 0)) {
			chequePaymentRequestCacheModel.ServiceRequestID = null;
		}

		chequePaymentRequestCacheModel.ServiceRequestMasterId = getServiceRequestMasterId();

		String ServiceRequestMasterId = chequePaymentRequestCacheModel.ServiceRequestMasterId;

		if ((ServiceRequestMasterId != null) &&
				(ServiceRequestMasterId.length() == 0)) {
			chequePaymentRequestCacheModel.ServiceRequestMasterId = null;
		}

		chequePaymentRequestCacheModel.description = getDescription();

		String description = chequePaymentRequestCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			chequePaymentRequestCacheModel.description = null;
		}

		chequePaymentRequestCacheModel.contactId = getContactId();

		String contactId = chequePaymentRequestCacheModel.contactId;

		if ((contactId != null) && (contactId.length() == 0)) {
			chequePaymentRequestCacheModel.contactId = null;
		}

		Date startPreferedTime = getStartPreferedTime();

		if (startPreferedTime != null) {
			chequePaymentRequestCacheModel.startPreferedTime = startPreferedTime.getTime();
		}
		else {
			chequePaymentRequestCacheModel.startPreferedTime = Long.MIN_VALUE;
		}

		Date endPreferedTime = getEndPreferedTime();

		if (endPreferedTime != null) {
			chequePaymentRequestCacheModel.endPreferedTime = endPreferedTime.getTime();
		}
		else {
			chequePaymentRequestCacheModel.endPreferedTime = Long.MIN_VALUE;
		}

		Date PreferedDate = getPreferedDate();

		if (PreferedDate != null) {
			chequePaymentRequestCacheModel.PreferedDate = PreferedDate.getTime();
		}
		else {
			chequePaymentRequestCacheModel.PreferedDate = Long.MIN_VALUE;
		}

		return chequePaymentRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{ServiceRequestID=");
		sb.append(getServiceRequestID());
		sb.append(", ServiceRequestMasterId=");
		sb.append(getServiceRequestMasterId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append(", startPreferedTime=");
		sb.append(getStartPreferedTime());
		sb.append(", endPreferedTime=");
		sb.append(getEndPreferedTime());
		sb.append(", PreferedDate=");
		sb.append(getPreferedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.ChequePaymentRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ServiceRequestID</column-name><column-value><![CDATA[");
		sb.append(getServiceRequestID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ServiceRequestMasterId</column-name><column-value><![CDATA[");
		sb.append(getServiceRequestMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startPreferedTime</column-name><column-value><![CDATA[");
		sb.append(getStartPreferedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endPreferedTime</column-name><column-value><![CDATA[");
		sb.append(getEndPreferedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PreferedDate</column-name><column-value><![CDATA[");
		sb.append(getPreferedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChequePaymentRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChequePaymentRequest.class
		};
	private String _ServiceRequestID;
	private String _ServiceRequestMasterId;
	private String _description;
	private String _contactId;
	private Date _startPreferedTime;
	private Date _endPreferedTime;
	private Date _PreferedDate;
	private ChequePaymentRequest _escapedModel;
}