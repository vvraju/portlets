/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.QRCStatus;
import com.ifli.rapid.model.QRCStatusModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the QRCStatus service. Represents a row in the &quot;QRC_Status&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.QRCStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QRCStatusImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see QRCStatusImpl
 * @see com.ifli.rapid.model.QRCStatus
 * @see com.ifli.rapid.model.QRCStatusModel
 * @generated
 */
public class QRCStatusModelImpl extends BaseModelImpl<QRCStatus>
	implements QRCStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a q r c status model instance should use the {@link com.ifli.rapid.model.QRCStatus} interface instead.
	 */
	public static final String TABLE_NAME = "QRC_Status";
	public static final Object[][] TABLE_COLUMNS = {
			{ "QRC_STATUS_ID", Types.INTEGER },
			{ "STATUS_DESC", Types.VARCHAR },
			{ "ACTIVE_FLAG", Types.VARCHAR },
			{ "INSERTED_DATE", Types.TIMESTAMP },
			{ "INSERTED_BY", Types.VARCHAR },
			{ "UPDATED_DATE", Types.TIMESTAMP },
			{ "UPDATED_BY", Types.VARCHAR },
			{ "DELETED_DATE", Types.TIMESTAMP },
			{ "DELETED_BY", Types.VARCHAR },
			{ "QRC_ASR_ID", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table QRC_Status (QRC_STATUS_ID INTEGER not null primary key IDENTITY,STATUS_DESC VARCHAR(75) null,ACTIVE_FLAG VARCHAR(75) null,INSERTED_DATE DATE null,INSERTED_BY VARCHAR(75) null,UPDATED_DATE DATE null,UPDATED_BY VARCHAR(75) null,DELETED_DATE DATE null,DELETED_BY VARCHAR(75) null,QRC_ASR_ID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table QRC_Status";
	public static final String ORDER_BY_JPQL = " ORDER BY qrcStatus.QRC_STATUS_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY QRC_Status.QRC_STATUS_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.QRCStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.QRCStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ifli.rapid.model.QRCStatus"),
			true);
	public static long QRC_ASR_ID_COLUMN_BITMASK = 1L;
	public static long QRC_STATUS_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.QRCStatus"));

	public QRCStatusModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _QRC_STATUS_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setQRC_STATUS_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _QRC_STATUS_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QRCStatus.class;
	}

	@Override
	public String getModelClassName() {
		return QRCStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("QRC_STATUS_ID", getQRC_STATUS_ID());
		attributes.put("STATUS_DESC", getSTATUS_DESC());
		attributes.put("ACTIVE_FLAG", getACTIVE_FLAG());
		attributes.put("INSERTED_DATE", getINSERTED_DATE());
		attributes.put("INSERTED_BY", getINSERTED_BY());
		attributes.put("UPDATED_DATE", getUPDATED_DATE());
		attributes.put("UPDATED_BY", getUPDATED_BY());
		attributes.put("DELETED_DATE", getDELETED_DATE());
		attributes.put("DELETED_BY", getDELETED_BY());
		attributes.put("QRC_ASR_ID", getQRC_ASR_ID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer QRC_STATUS_ID = (Integer)attributes.get("QRC_STATUS_ID");

		if (QRC_STATUS_ID != null) {
			setQRC_STATUS_ID(QRC_STATUS_ID);
		}

		String STATUS_DESC = (String)attributes.get("STATUS_DESC");

		if (STATUS_DESC != null) {
			setSTATUS_DESC(STATUS_DESC);
		}

		String ACTIVE_FLAG = (String)attributes.get("ACTIVE_FLAG");

		if (ACTIVE_FLAG != null) {
			setACTIVE_FLAG(ACTIVE_FLAG);
		}

		Date INSERTED_DATE = (Date)attributes.get("INSERTED_DATE");

		if (INSERTED_DATE != null) {
			setINSERTED_DATE(INSERTED_DATE);
		}

		String INSERTED_BY = (String)attributes.get("INSERTED_BY");

		if (INSERTED_BY != null) {
			setINSERTED_BY(INSERTED_BY);
		}

		Date UPDATED_DATE = (Date)attributes.get("UPDATED_DATE");

		if (UPDATED_DATE != null) {
			setUPDATED_DATE(UPDATED_DATE);
		}

		String UPDATED_BY = (String)attributes.get("UPDATED_BY");

		if (UPDATED_BY != null) {
			setUPDATED_BY(UPDATED_BY);
		}

		Date DELETED_DATE = (Date)attributes.get("DELETED_DATE");

		if (DELETED_DATE != null) {
			setDELETED_DATE(DELETED_DATE);
		}

		String DELETED_BY = (String)attributes.get("DELETED_BY");

		if (DELETED_BY != null) {
			setDELETED_BY(DELETED_BY);
		}

		Integer QRC_ASR_ID = (Integer)attributes.get("QRC_ASR_ID");

		if (QRC_ASR_ID != null) {
			setQRC_ASR_ID(QRC_ASR_ID);
		}
	}

	@Override
	public int getQRC_STATUS_ID() {
		return _QRC_STATUS_ID;
	}

	@Override
	public void setQRC_STATUS_ID(int QRC_STATUS_ID) {
		_QRC_STATUS_ID = QRC_STATUS_ID;
	}

	@Override
	public String getSTATUS_DESC() {
		if (_STATUS_DESC == null) {
			return StringPool.BLANK;
		}
		else {
			return _STATUS_DESC;
		}
	}

	@Override
	public void setSTATUS_DESC(String STATUS_DESC) {
		_STATUS_DESC = STATUS_DESC;
	}

	@Override
	public String getACTIVE_FLAG() {
		if (_ACTIVE_FLAG == null) {
			return StringPool.BLANK;
		}
		else {
			return _ACTIVE_FLAG;
		}
	}

	@Override
	public void setACTIVE_FLAG(String ACTIVE_FLAG) {
		_ACTIVE_FLAG = ACTIVE_FLAG;
	}

	@Override
	public Date getINSERTED_DATE() {
		return _INSERTED_DATE;
	}

	@Override
	public void setINSERTED_DATE(Date INSERTED_DATE) {
		_INSERTED_DATE = INSERTED_DATE;
	}

	@Override
	public String getINSERTED_BY() {
		if (_INSERTED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _INSERTED_BY;
		}
	}

	@Override
	public void setINSERTED_BY(String INSERTED_BY) {
		_INSERTED_BY = INSERTED_BY;
	}

	@Override
	public Date getUPDATED_DATE() {
		return _UPDATED_DATE;
	}

	@Override
	public void setUPDATED_DATE(Date UPDATED_DATE) {
		_UPDATED_DATE = UPDATED_DATE;
	}

	@Override
	public String getUPDATED_BY() {
		if (_UPDATED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _UPDATED_BY;
		}
	}

	@Override
	public void setUPDATED_BY(String UPDATED_BY) {
		_UPDATED_BY = UPDATED_BY;
	}

	@Override
	public Date getDELETED_DATE() {
		return _DELETED_DATE;
	}

	@Override
	public void setDELETED_DATE(Date DELETED_DATE) {
		_DELETED_DATE = DELETED_DATE;
	}

	@Override
	public String getDELETED_BY() {
		if (_DELETED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _DELETED_BY;
		}
	}

	@Override
	public void setDELETED_BY(String DELETED_BY) {
		_DELETED_BY = DELETED_BY;
	}

	@Override
	public int getQRC_ASR_ID() {
		return _QRC_ASR_ID;
	}

	@Override
	public void setQRC_ASR_ID(int QRC_ASR_ID) {
		_columnBitmask |= QRC_ASR_ID_COLUMN_BITMASK;

		if (!_setOriginalQRC_ASR_ID) {
			_setOriginalQRC_ASR_ID = true;

			_originalQRC_ASR_ID = _QRC_ASR_ID;
		}

		_QRC_ASR_ID = QRC_ASR_ID;
	}

	public int getOriginalQRC_ASR_ID() {
		return _originalQRC_ASR_ID;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public QRCStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (QRCStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QRCStatusImpl qrcStatusImpl = new QRCStatusImpl();

		qrcStatusImpl.setQRC_STATUS_ID(getQRC_STATUS_ID());
		qrcStatusImpl.setSTATUS_DESC(getSTATUS_DESC());
		qrcStatusImpl.setACTIVE_FLAG(getACTIVE_FLAG());
		qrcStatusImpl.setINSERTED_DATE(getINSERTED_DATE());
		qrcStatusImpl.setINSERTED_BY(getINSERTED_BY());
		qrcStatusImpl.setUPDATED_DATE(getUPDATED_DATE());
		qrcStatusImpl.setUPDATED_BY(getUPDATED_BY());
		qrcStatusImpl.setDELETED_DATE(getDELETED_DATE());
		qrcStatusImpl.setDELETED_BY(getDELETED_BY());
		qrcStatusImpl.setQRC_ASR_ID(getQRC_ASR_ID());

		qrcStatusImpl.resetOriginalValues();

		return qrcStatusImpl;
	}

	@Override
	public int compareTo(QRCStatus qrcStatus) {
		int primaryKey = qrcStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof QRCStatus)) {
			return false;
		}

		QRCStatus qrcStatus = (QRCStatus)obj;

		int primaryKey = qrcStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		QRCStatusModelImpl qrcStatusModelImpl = this;

		qrcStatusModelImpl._originalQRC_ASR_ID = qrcStatusModelImpl._QRC_ASR_ID;

		qrcStatusModelImpl._setOriginalQRC_ASR_ID = false;

		qrcStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<QRCStatus> toCacheModel() {
		QRCStatusCacheModel qrcStatusCacheModel = new QRCStatusCacheModel();

		qrcStatusCacheModel.QRC_STATUS_ID = getQRC_STATUS_ID();

		qrcStatusCacheModel.STATUS_DESC = getSTATUS_DESC();

		String STATUS_DESC = qrcStatusCacheModel.STATUS_DESC;

		if ((STATUS_DESC != null) && (STATUS_DESC.length() == 0)) {
			qrcStatusCacheModel.STATUS_DESC = null;
		}

		qrcStatusCacheModel.ACTIVE_FLAG = getACTIVE_FLAG();

		String ACTIVE_FLAG = qrcStatusCacheModel.ACTIVE_FLAG;

		if ((ACTIVE_FLAG != null) && (ACTIVE_FLAG.length() == 0)) {
			qrcStatusCacheModel.ACTIVE_FLAG = null;
		}

		Date INSERTED_DATE = getINSERTED_DATE();

		if (INSERTED_DATE != null) {
			qrcStatusCacheModel.INSERTED_DATE = INSERTED_DATE.getTime();
		}
		else {
			qrcStatusCacheModel.INSERTED_DATE = Long.MIN_VALUE;
		}

		qrcStatusCacheModel.INSERTED_BY = getINSERTED_BY();

		String INSERTED_BY = qrcStatusCacheModel.INSERTED_BY;

		if ((INSERTED_BY != null) && (INSERTED_BY.length() == 0)) {
			qrcStatusCacheModel.INSERTED_BY = null;
		}

		Date UPDATED_DATE = getUPDATED_DATE();

		if (UPDATED_DATE != null) {
			qrcStatusCacheModel.UPDATED_DATE = UPDATED_DATE.getTime();
		}
		else {
			qrcStatusCacheModel.UPDATED_DATE = Long.MIN_VALUE;
		}

		qrcStatusCacheModel.UPDATED_BY = getUPDATED_BY();

		String UPDATED_BY = qrcStatusCacheModel.UPDATED_BY;

		if ((UPDATED_BY != null) && (UPDATED_BY.length() == 0)) {
			qrcStatusCacheModel.UPDATED_BY = null;
		}

		Date DELETED_DATE = getDELETED_DATE();

		if (DELETED_DATE != null) {
			qrcStatusCacheModel.DELETED_DATE = DELETED_DATE.getTime();
		}
		else {
			qrcStatusCacheModel.DELETED_DATE = Long.MIN_VALUE;
		}

		qrcStatusCacheModel.DELETED_BY = getDELETED_BY();

		String DELETED_BY = qrcStatusCacheModel.DELETED_BY;

		if ((DELETED_BY != null) && (DELETED_BY.length() == 0)) {
			qrcStatusCacheModel.DELETED_BY = null;
		}

		qrcStatusCacheModel.QRC_ASR_ID = getQRC_ASR_ID();

		return qrcStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{QRC_STATUS_ID=");
		sb.append(getQRC_STATUS_ID());
		sb.append(", STATUS_DESC=");
		sb.append(getSTATUS_DESC());
		sb.append(", ACTIVE_FLAG=");
		sb.append(getACTIVE_FLAG());
		sb.append(", INSERTED_DATE=");
		sb.append(getINSERTED_DATE());
		sb.append(", INSERTED_BY=");
		sb.append(getINSERTED_BY());
		sb.append(", UPDATED_DATE=");
		sb.append(getUPDATED_DATE());
		sb.append(", UPDATED_BY=");
		sb.append(getUPDATED_BY());
		sb.append(", DELETED_DATE=");
		sb.append(getDELETED_DATE());
		sb.append(", DELETED_BY=");
		sb.append(getDELETED_BY());
		sb.append(", QRC_ASR_ID=");
		sb.append(getQRC_ASR_ID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.QRCStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>QRC_STATUS_ID</column-name><column-value><![CDATA[");
		sb.append(getQRC_STATUS_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS_DESC</column-name><column-value><![CDATA[");
		sb.append(getSTATUS_DESC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACTIVE_FLAG</column-name><column-value><![CDATA[");
		sb.append(getACTIVE_FLAG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_DATE</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_BY</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_BY</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DELETED_DATE</column-name><column-value><![CDATA[");
		sb.append(getDELETED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DELETED_BY</column-name><column-value><![CDATA[");
		sb.append(getDELETED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>QRC_ASR_ID</column-name><column-value><![CDATA[");
		sb.append(getQRC_ASR_ID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = QRCStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			QRCStatus.class
		};
	private int _QRC_STATUS_ID;
	private String _STATUS_DESC;
	private String _ACTIVE_FLAG;
	private Date _INSERTED_DATE;
	private String _INSERTED_BY;
	private Date _UPDATED_DATE;
	private String _UPDATED_BY;
	private Date _DELETED_DATE;
	private String _DELETED_BY;
	private int _QRC_ASR_ID;
	private int _originalQRC_ASR_ID;
	private boolean _setOriginalQRC_ASR_ID;
	private long _columnBitmask;
	private QRCStatus _escapedModel;
}