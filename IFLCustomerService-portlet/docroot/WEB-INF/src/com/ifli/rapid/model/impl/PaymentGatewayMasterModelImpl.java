/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PaymentGatewayMaster;
import com.ifli.rapid.model.PaymentGatewayMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PaymentGatewayMaster service. Represents a row in the &quot;PaymentGatewayMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PaymentGatewayMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentGatewayMasterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PaymentGatewayMasterImpl
 * @see com.ifli.rapid.model.PaymentGatewayMaster
 * @see com.ifli.rapid.model.PaymentGatewayMasterModel
 * @generated
 */
public class PaymentGatewayMasterModelImpl extends BaseModelImpl<PaymentGatewayMaster>
	implements PaymentGatewayMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payment gateway master model instance should use the {@link com.ifli.rapid.model.PaymentGatewayMaster} interface instead.
	 */
	public static final String TABLE_NAME = "PaymentGatewayMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GatewayID", Types.VARCHAR },
			{ "GatewayDescription", Types.VARCHAR },
			{ "GatewayKey", Types.VARCHAR },
			{ "IsActive", Types.BOOLEAN },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "Priority", Types.INTEGER },
			{ "ItemCode", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PaymentGatewayMaster (GatewayID VARCHAR(75) not null primary key IDENTITY,GatewayDescription VARCHAR(75) null,GatewayKey VARCHAR(75) null,IsActive BOOLEAN,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,Priority INTEGER,ItemCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PaymentGatewayMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY paymentGatewayMaster.Priority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PaymentGatewayMaster.Priority ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PaymentGatewayMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PaymentGatewayMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PaymentGatewayMaster"));

	public PaymentGatewayMasterModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _GatewayID;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setGatewayID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _GatewayID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PaymentGatewayMaster.class;
	}

	@Override
	public String getModelClassName() {
		return PaymentGatewayMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("GatewayID", getGatewayID());
		attributes.put("GatewayDescription", getGatewayDescription());
		attributes.put("GatewayKey", getGatewayKey());
		attributes.put("IsActive", getIsActive());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("Priority", getPriority());
		attributes.put("ItemCode", getItemCode());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String GatewayID = (String)attributes.get("GatewayID");

		if (GatewayID != null) {
			setGatewayID(GatewayID);
		}

		String GatewayDescription = (String)attributes.get("GatewayDescription");

		if (GatewayDescription != null) {
			setGatewayDescription(GatewayDescription);
		}

		String GatewayKey = (String)attributes.get("GatewayKey");

		if (GatewayKey != null) {
			setGatewayKey(GatewayKey);
		}

		Boolean IsActive = (Boolean)attributes.get("IsActive");

		if (IsActive != null) {
			setIsActive(IsActive);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		Integer Priority = (Integer)attributes.get("Priority");

		if (Priority != null) {
			setPriority(Priority);
		}

		String ItemCode = (String)attributes.get("ItemCode");

		if (ItemCode != null) {
			setItemCode(ItemCode);
		}
	}

	@Override
	public String getGatewayID() {
		if (_GatewayID == null) {
			return StringPool.BLANK;
		}
		else {
			return _GatewayID;
		}
	}

	@Override
	public void setGatewayID(String GatewayID) {
		_GatewayID = GatewayID;
	}

	@Override
	public String getGatewayDescription() {
		if (_GatewayDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _GatewayDescription;
		}
	}

	@Override
	public void setGatewayDescription(String GatewayDescription) {
		_GatewayDescription = GatewayDescription;
	}

	@Override
	public String getGatewayKey() {
		if (_GatewayKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _GatewayKey;
		}
	}

	@Override
	public void setGatewayKey(String GatewayKey) {
		_GatewayKey = GatewayKey;
	}

	@Override
	public boolean getIsActive() {
		return _IsActive;
	}

	@Override
	public boolean isIsActive() {
		return _IsActive;
	}

	@Override
	public void setIsActive(boolean IsActive) {
		_IsActive = IsActive;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public int getPriority() {
		return _Priority;
	}

	@Override
	public void setPriority(int Priority) {
		_Priority = Priority;
	}

	@Override
	public String getItemCode() {
		if (_ItemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ItemCode;
		}
	}

	@Override
	public void setItemCode(String ItemCode) {
		_ItemCode = ItemCode;
	}

	@Override
	public PaymentGatewayMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PaymentGatewayMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PaymentGatewayMasterImpl paymentGatewayMasterImpl = new PaymentGatewayMasterImpl();

		paymentGatewayMasterImpl.setGatewayID(getGatewayID());
		paymentGatewayMasterImpl.setGatewayDescription(getGatewayDescription());
		paymentGatewayMasterImpl.setGatewayKey(getGatewayKey());
		paymentGatewayMasterImpl.setIsActive(getIsActive());
		paymentGatewayMasterImpl.setCreatedBy(getCreatedBy());
		paymentGatewayMasterImpl.setCreatedDate(getCreatedDate());
		paymentGatewayMasterImpl.setModifiedBy(getModifiedBy());
		paymentGatewayMasterImpl.setModifiedDate(getModifiedDate());
		paymentGatewayMasterImpl.setPriority(getPriority());
		paymentGatewayMasterImpl.setItemCode(getItemCode());

		paymentGatewayMasterImpl.resetOriginalValues();

		return paymentGatewayMasterImpl;
	}

	@Override
	public int compareTo(PaymentGatewayMaster paymentGatewayMaster) {
		int value = 0;

		if (getPriority() < paymentGatewayMaster.getPriority()) {
			value = -1;
		}
		else if (getPriority() > paymentGatewayMaster.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PaymentGatewayMaster)) {
			return false;
		}

		PaymentGatewayMaster paymentGatewayMaster = (PaymentGatewayMaster)obj;

		String primaryKey = paymentGatewayMaster.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PaymentGatewayMaster> toCacheModel() {
		PaymentGatewayMasterCacheModel paymentGatewayMasterCacheModel = new PaymentGatewayMasterCacheModel();

		paymentGatewayMasterCacheModel.GatewayID = getGatewayID();

		String GatewayID = paymentGatewayMasterCacheModel.GatewayID;

		if ((GatewayID != null) && (GatewayID.length() == 0)) {
			paymentGatewayMasterCacheModel.GatewayID = null;
		}

		paymentGatewayMasterCacheModel.GatewayDescription = getGatewayDescription();

		String GatewayDescription = paymentGatewayMasterCacheModel.GatewayDescription;

		if ((GatewayDescription != null) && (GatewayDescription.length() == 0)) {
			paymentGatewayMasterCacheModel.GatewayDescription = null;
		}

		paymentGatewayMasterCacheModel.GatewayKey = getGatewayKey();

		String GatewayKey = paymentGatewayMasterCacheModel.GatewayKey;

		if ((GatewayKey != null) && (GatewayKey.length() == 0)) {
			paymentGatewayMasterCacheModel.GatewayKey = null;
		}

		paymentGatewayMasterCacheModel.IsActive = getIsActive();

		paymentGatewayMasterCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = paymentGatewayMasterCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			paymentGatewayMasterCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			paymentGatewayMasterCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			paymentGatewayMasterCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		paymentGatewayMasterCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = paymentGatewayMasterCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			paymentGatewayMasterCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			paymentGatewayMasterCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			paymentGatewayMasterCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		paymentGatewayMasterCacheModel.Priority = getPriority();

		paymentGatewayMasterCacheModel.ItemCode = getItemCode();

		String ItemCode = paymentGatewayMasterCacheModel.ItemCode;

		if ((ItemCode != null) && (ItemCode.length() == 0)) {
			paymentGatewayMasterCacheModel.ItemCode = null;
		}

		return paymentGatewayMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{GatewayID=");
		sb.append(getGatewayID());
		sb.append(", GatewayDescription=");
		sb.append(getGatewayDescription());
		sb.append(", GatewayKey=");
		sb.append(getGatewayKey());
		sb.append(", IsActive=");
		sb.append(getIsActive());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", Priority=");
		sb.append(getPriority());
		sb.append(", ItemCode=");
		sb.append(getItemCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PaymentGatewayMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>GatewayID</column-name><column-value><![CDATA[");
		sb.append(getGatewayID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>GatewayDescription</column-name><column-value><![CDATA[");
		sb.append(getGatewayDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>GatewayKey</column-name><column-value><![CDATA[");
		sb.append(getGatewayKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IsActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ItemCode</column-name><column-value><![CDATA[");
		sb.append(getItemCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PaymentGatewayMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PaymentGatewayMaster.class
		};
	private String _GatewayID;
	private String _GatewayDescription;
	private String _GatewayKey;
	private boolean _IsActive;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private int _Priority;
	private String _ItemCode;
	private PaymentGatewayMaster _escapedModel;
}