/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.POLICY_DOC_TYPES;
import com.ifli.rapid.model.POLICY_DOC_TYPESModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the POLICY_DOC_TYPES service. Represents a row in the &quot;POLICY_DOC_TYPES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.POLICY_DOC_TYPESModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link POLICY_DOC_TYPESImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see POLICY_DOC_TYPESImpl
 * @see com.ifli.rapid.model.POLICY_DOC_TYPES
 * @see com.ifli.rapid.model.POLICY_DOC_TYPESModel
 * @generated
 */
public class POLICY_DOC_TYPESModelImpl extends BaseModelImpl<POLICY_DOC_TYPES>
	implements POLICY_DOC_TYPESModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p o l i c y_ d o c_ t y p e s model instance should use the {@link com.ifli.rapid.model.POLICY_DOC_TYPES} interface instead.
	 */
	public static final String TABLE_NAME = "POLICY_DOC_TYPES";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "DOC_NAME", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table POLICY_DOC_TYPES (ID INTEGER not null primary key,DOC_NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table POLICY_DOC_TYPES";
	public static final String ORDER_BY_JPQL = " ORDER BY policy_doc_types.ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY POLICY_DOC_TYPES.ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.POLICY_DOC_TYPES"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.POLICY_DOC_TYPES"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.POLICY_DOC_TYPES"));

	public POLICY_DOC_TYPESModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return POLICY_DOC_TYPES.class;
	}

	@Override
	public String getModelClassName() {
		return POLICY_DOC_TYPES.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("DOC_NAME", getDOC_NAME());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ID = (Integer)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		String DOC_NAME = (String)attributes.get("DOC_NAME");

		if (DOC_NAME != null) {
			setDOC_NAME(DOC_NAME);
		}
	}

	@Override
	public int getID() {
		return _ID;
	}

	@Override
	public void setID(int ID) {
		_ID = ID;
	}

	@Override
	public String getDOC_NAME() {
		if (_DOC_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _DOC_NAME;
		}
	}

	@Override
	public void setDOC_NAME(String DOC_NAME) {
		_DOC_NAME = DOC_NAME;
	}

	@Override
	public POLICY_DOC_TYPES toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (POLICY_DOC_TYPES)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		POLICY_DOC_TYPESImpl policy_doc_typesImpl = new POLICY_DOC_TYPESImpl();

		policy_doc_typesImpl.setID(getID());
		policy_doc_typesImpl.setDOC_NAME(getDOC_NAME());

		policy_doc_typesImpl.resetOriginalValues();

		return policy_doc_typesImpl;
	}

	@Override
	public int compareTo(POLICY_DOC_TYPES policy_doc_types) {
		int primaryKey = policy_doc_types.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof POLICY_DOC_TYPES)) {
			return false;
		}

		POLICY_DOC_TYPES policy_doc_types = (POLICY_DOC_TYPES)obj;

		int primaryKey = policy_doc_types.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<POLICY_DOC_TYPES> toCacheModel() {
		POLICY_DOC_TYPESCacheModel policy_doc_typesCacheModel = new POLICY_DOC_TYPESCacheModel();

		policy_doc_typesCacheModel.ID = getID();

		policy_doc_typesCacheModel.DOC_NAME = getDOC_NAME();

		String DOC_NAME = policy_doc_typesCacheModel.DOC_NAME;

		if ((DOC_NAME != null) && (DOC_NAME.length() == 0)) {
			policy_doc_typesCacheModel.DOC_NAME = null;
		}

		return policy_doc_typesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", DOC_NAME=");
		sb.append(getDOC_NAME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.POLICY_DOC_TYPES");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DOC_NAME</column-name><column-value><![CDATA[");
		sb.append(getDOC_NAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = POLICY_DOC_TYPES.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			POLICY_DOC_TYPES.class
		};
	private int _ID;
	private String _DOC_NAME;
	private POLICY_DOC_TYPES _escapedModel;
}