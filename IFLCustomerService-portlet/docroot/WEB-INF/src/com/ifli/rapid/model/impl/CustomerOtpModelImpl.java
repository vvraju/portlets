/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.CustomerOtp;
import com.ifli.rapid.model.CustomerOtpModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CustomerOtp service. Represents a row in the &quot;customer_otp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.CustomerOtpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerOtpImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see CustomerOtpImpl
 * @see com.ifli.rapid.model.CustomerOtp
 * @see com.ifli.rapid.model.CustomerOtpModel
 * @generated
 */
public class CustomerOtpModelImpl extends BaseModelImpl<CustomerOtp>
	implements CustomerOtpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer otp model instance should use the {@link com.ifli.rapid.model.CustomerOtp} interface instead.
	 */
	public static final String TABLE_NAME = "customer_otp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CUSTOMER_ID", Types.INTEGER },
			{ "EMAIL_OTP", Types.VARCHAR },
			{ "PHONE_OTP", Types.VARCHAR },
			{ "STATUS", Types.VARCHAR },
			{ "ADDED_DATE", Types.TIMESTAMP },
			{ "UPDATED_DATE", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table customer_otp (CUSTOMER_ID INTEGER not null primary key,EMAIL_OTP VARCHAR(75) null,PHONE_OTP VARCHAR(75) null,STATUS VARCHAR(75) null,ADDED_DATE DATE null,UPDATED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table customer_otp";
	public static final String ORDER_BY_JPQL = " ORDER BY customerOtp.CUSTOMER_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY customer_otp.CUSTOMER_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.CustomerOtp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.CustomerOtp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.CustomerOtp"));

	public CustomerOtpModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _CUSTOMER_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCUSTOMER_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CUSTOMER_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomerOtp.class;
	}

	@Override
	public String getModelClassName() {
		return CustomerOtp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("CUSTOMER_ID", getCUSTOMER_ID());
		attributes.put("EMAIL_OTP", getEMAIL_OTP());
		attributes.put("PHONE_OTP", getPHONE_OTP());
		attributes.put("STATUS", getSTATUS());
		attributes.put("ADDED_DATE", getADDED_DATE());
		attributes.put("UPDATED_DATE", getUPDATED_DATE());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer CUSTOMER_ID = (Integer)attributes.get("CUSTOMER_ID");

		if (CUSTOMER_ID != null) {
			setCUSTOMER_ID(CUSTOMER_ID);
		}

		String EMAIL_OTP = (String)attributes.get("EMAIL_OTP");

		if (EMAIL_OTP != null) {
			setEMAIL_OTP(EMAIL_OTP);
		}

		String PHONE_OTP = (String)attributes.get("PHONE_OTP");

		if (PHONE_OTP != null) {
			setPHONE_OTP(PHONE_OTP);
		}

		String STATUS = (String)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}

		Date ADDED_DATE = (Date)attributes.get("ADDED_DATE");

		if (ADDED_DATE != null) {
			setADDED_DATE(ADDED_DATE);
		}

		Date UPDATED_DATE = (Date)attributes.get("UPDATED_DATE");

		if (UPDATED_DATE != null) {
			setUPDATED_DATE(UPDATED_DATE);
		}
	}

	@Override
	public int getCUSTOMER_ID() {
		return _CUSTOMER_ID;
	}

	@Override
	public void setCUSTOMER_ID(int CUSTOMER_ID) {
		_CUSTOMER_ID = CUSTOMER_ID;
	}

	@Override
	public String getEMAIL_OTP() {
		if (_EMAIL_OTP == null) {
			return StringPool.BLANK;
		}
		else {
			return _EMAIL_OTP;
		}
	}

	@Override
	public void setEMAIL_OTP(String EMAIL_OTP) {
		_EMAIL_OTP = EMAIL_OTP;
	}

	@Override
	public String getPHONE_OTP() {
		if (_PHONE_OTP == null) {
			return StringPool.BLANK;
		}
		else {
			return _PHONE_OTP;
		}
	}

	@Override
	public void setPHONE_OTP(String PHONE_OTP) {
		_PHONE_OTP = PHONE_OTP;
	}

	@Override
	public String getSTATUS() {
		if (_STATUS == null) {
			return StringPool.BLANK;
		}
		else {
			return _STATUS;
		}
	}

	@Override
	public void setSTATUS(String STATUS) {
		_STATUS = STATUS;
	}

	@Override
	public Date getADDED_DATE() {
		return _ADDED_DATE;
	}

	@Override
	public void setADDED_DATE(Date ADDED_DATE) {
		_ADDED_DATE = ADDED_DATE;
	}

	@Override
	public Date getUPDATED_DATE() {
		return _UPDATED_DATE;
	}

	@Override
	public void setUPDATED_DATE(Date UPDATED_DATE) {
		_UPDATED_DATE = UPDATED_DATE;
	}

	@Override
	public CustomerOtp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CustomerOtp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerOtpImpl customerOtpImpl = new CustomerOtpImpl();

		customerOtpImpl.setCUSTOMER_ID(getCUSTOMER_ID());
		customerOtpImpl.setEMAIL_OTP(getEMAIL_OTP());
		customerOtpImpl.setPHONE_OTP(getPHONE_OTP());
		customerOtpImpl.setSTATUS(getSTATUS());
		customerOtpImpl.setADDED_DATE(getADDED_DATE());
		customerOtpImpl.setUPDATED_DATE(getUPDATED_DATE());

		customerOtpImpl.resetOriginalValues();

		return customerOtpImpl;
	}

	@Override
	public int compareTo(CustomerOtp customerOtp) {
		int primaryKey = customerOtp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CustomerOtp)) {
			return false;
		}

		CustomerOtp customerOtp = (CustomerOtp)obj;

		int primaryKey = customerOtp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CustomerOtp> toCacheModel() {
		CustomerOtpCacheModel customerOtpCacheModel = new CustomerOtpCacheModel();

		customerOtpCacheModel.CUSTOMER_ID = getCUSTOMER_ID();

		customerOtpCacheModel.EMAIL_OTP = getEMAIL_OTP();

		String EMAIL_OTP = customerOtpCacheModel.EMAIL_OTP;

		if ((EMAIL_OTP != null) && (EMAIL_OTP.length() == 0)) {
			customerOtpCacheModel.EMAIL_OTP = null;
		}

		customerOtpCacheModel.PHONE_OTP = getPHONE_OTP();

		String PHONE_OTP = customerOtpCacheModel.PHONE_OTP;

		if ((PHONE_OTP != null) && (PHONE_OTP.length() == 0)) {
			customerOtpCacheModel.PHONE_OTP = null;
		}

		customerOtpCacheModel.STATUS = getSTATUS();

		String STATUS = customerOtpCacheModel.STATUS;

		if ((STATUS != null) && (STATUS.length() == 0)) {
			customerOtpCacheModel.STATUS = null;
		}

		Date ADDED_DATE = getADDED_DATE();

		if (ADDED_DATE != null) {
			customerOtpCacheModel.ADDED_DATE = ADDED_DATE.getTime();
		}
		else {
			customerOtpCacheModel.ADDED_DATE = Long.MIN_VALUE;
		}

		Date UPDATED_DATE = getUPDATED_DATE();

		if (UPDATED_DATE != null) {
			customerOtpCacheModel.UPDATED_DATE = UPDATED_DATE.getTime();
		}
		else {
			customerOtpCacheModel.UPDATED_DATE = Long.MIN_VALUE;
		}

		return customerOtpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{CUSTOMER_ID=");
		sb.append(getCUSTOMER_ID());
		sb.append(", EMAIL_OTP=");
		sb.append(getEMAIL_OTP());
		sb.append(", PHONE_OTP=");
		sb.append(getPHONE_OTP());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append(", ADDED_DATE=");
		sb.append(getADDED_DATE());
		sb.append(", UPDATED_DATE=");
		sb.append(getUPDATED_DATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.CustomerOtp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>CUSTOMER_ID</column-name><column-value><![CDATA[");
		sb.append(getCUSTOMER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EMAIL_OTP</column-name><column-value><![CDATA[");
		sb.append(getEMAIL_OTP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PHONE_OTP</column-name><column-value><![CDATA[");
		sb.append(getPHONE_OTP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ADDED_DATE</column-name><column-value><![CDATA[");
		sb.append(getADDED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_DATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CustomerOtp.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CustomerOtp.class
		};
	private int _CUSTOMER_ID;
	private String _EMAIL_OTP;
	private String _PHONE_OTP;
	private String _STATUS;
	private Date _ADDED_DATE;
	private Date _UPDATED_DATE;
	private CustomerOtp _escapedModel;
}