/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PaymentDetails;
import com.ifli.rapid.model.PaymentDetailsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PaymentDetails service. Represents a row in the &quot;PaymentDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PaymentDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentDetailsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PaymentDetailsImpl
 * @see com.ifli.rapid.model.PaymentDetails
 * @see com.ifli.rapid.model.PaymentDetailsModel
 * @generated
 */
public class PaymentDetailsModelImpl extends BaseModelImpl<PaymentDetails>
	implements PaymentDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payment details model instance should use the {@link com.ifli.rapid.model.PaymentDetails} interface instead.
	 */
	public static final String TABLE_NAME = "PaymentDetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PaymentId", Types.INTEGER },
			{ "PremiumFrequencyID", Types.VARCHAR },
			{ "TransactionStatusID", Types.INTEGER },
			{ "RequestTypeID", Types.VARCHAR },
			{ "PaymentOptionId", Types.VARCHAR },
			{ "PaymentMethodID", Types.VARCHAR },
			{ "ProductID", Types.VARCHAR },
			{ "ProposalId", Types.VARCHAR },
			{ "PremiumAmount", Types.DOUBLE },
			{ "BankName", Types.VARCHAR },
			{ "CreditCardNo", Types.BIGINT },
			{ "CardType", Types.VARCHAR },
			{ "NameAsCard", Types.VARCHAR },
			{ "CVVNo", Types.INTEGER },
			{ "CardExpiryDate", Types.TIMESTAMP },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "ChequePickupRequestId", Types.VARCHAR },
			{ "TransactionReferenceNo", Types.VARCHAR },
			{ "BillDeskMerchantId", Types.VARCHAR },
			{ "BobMerchantTxnId", Types.VARCHAR },
			{ "PaymentReceiptNo", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table PaymentDetails (PaymentId INTEGER not null primary key IDENTITY,PremiumFrequencyID VARCHAR(75) null,TransactionStatusID INTEGER,RequestTypeID VARCHAR(75) null,PaymentOptionId VARCHAR(75) null,PaymentMethodID VARCHAR(75) null,ProductID VARCHAR(75) null,ProposalId VARCHAR(75) null,PremiumAmount DOUBLE,BankName VARCHAR(75) null,CreditCardNo LONG,CardType VARCHAR(75) null,NameAsCard VARCHAR(75) null,CVVNo INTEGER,CardExpiryDate DATE null,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,ChequePickupRequestId VARCHAR(75) null,TransactionReferenceNo VARCHAR(75) null,BillDeskMerchantId VARCHAR(75) null,BobMerchantTxnId VARCHAR(75) null,PaymentReceiptNo LONG)";
	public static final String TABLE_SQL_DROP = "drop table PaymentDetails";
	public static final String ORDER_BY_JPQL = " ORDER BY paymentDetails.PaymentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PaymentDetails.PaymentId ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PaymentDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PaymentDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PaymentDetails"));

	public PaymentDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _PaymentId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setPaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PaymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PaymentDetails.class;
	}

	@Override
	public String getModelClassName() {
		return PaymentDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PaymentId", getPaymentId());
		attributes.put("PremiumFrequencyID", getPremiumFrequencyID());
		attributes.put("TransactionStatusID", getTransactionStatusID());
		attributes.put("RequestTypeID", getRequestTypeID());
		attributes.put("PaymentOptionId", getPaymentOptionId());
		attributes.put("PaymentMethodID", getPaymentMethodID());
		attributes.put("ProductID", getProductID());
		attributes.put("ProposalId", getProposalId());
		attributes.put("PremiumAmount", getPremiumAmount());
		attributes.put("BankName", getBankName());
		attributes.put("CreditCardNo", getCreditCardNo());
		attributes.put("CardType", getCardType());
		attributes.put("NameAsCard", getNameAsCard());
		attributes.put("CVVNo", getCVVNo());
		attributes.put("CardExpiryDate", getCardExpiryDate());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("ChequePickupRequestId", getChequePickupRequestId());
		attributes.put("TransactionReferenceNo", getTransactionReferenceNo());
		attributes.put("BillDeskMerchantId", getBillDeskMerchantId());
		attributes.put("BobMerchantTxnId", getBobMerchantTxnId());
		attributes.put("PaymentReceiptNo", getPaymentReceiptNo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer PaymentId = (Integer)attributes.get("PaymentId");

		if (PaymentId != null) {
			setPaymentId(PaymentId);
		}

		String PremiumFrequencyID = (String)attributes.get("PremiumFrequencyID");

		if (PremiumFrequencyID != null) {
			setPremiumFrequencyID(PremiumFrequencyID);
		}

		Integer TransactionStatusID = (Integer)attributes.get(
				"TransactionStatusID");

		if (TransactionStatusID != null) {
			setTransactionStatusID(TransactionStatusID);
		}

		String RequestTypeID = (String)attributes.get("RequestTypeID");

		if (RequestTypeID != null) {
			setRequestTypeID(RequestTypeID);
		}

		String PaymentOptionId = (String)attributes.get("PaymentOptionId");

		if (PaymentOptionId != null) {
			setPaymentOptionId(PaymentOptionId);
		}

		String PaymentMethodID = (String)attributes.get("PaymentMethodID");

		if (PaymentMethodID != null) {
			setPaymentMethodID(PaymentMethodID);
		}

		String ProductID = (String)attributes.get("ProductID");

		if (ProductID != null) {
			setProductID(ProductID);
		}

		String ProposalId = (String)attributes.get("ProposalId");

		if (ProposalId != null) {
			setProposalId(ProposalId);
		}

		Double PremiumAmount = (Double)attributes.get("PremiumAmount");

		if (PremiumAmount != null) {
			setPremiumAmount(PremiumAmount);
		}

		String BankName = (String)attributes.get("BankName");

		if (BankName != null) {
			setBankName(BankName);
		}

		Long CreditCardNo = (Long)attributes.get("CreditCardNo");

		if (CreditCardNo != null) {
			setCreditCardNo(CreditCardNo);
		}

		String CardType = (String)attributes.get("CardType");

		if (CardType != null) {
			setCardType(CardType);
		}

		String NameAsCard = (String)attributes.get("NameAsCard");

		if (NameAsCard != null) {
			setNameAsCard(NameAsCard);
		}

		Integer CVVNo = (Integer)attributes.get("CVVNo");

		if (CVVNo != null) {
			setCVVNo(CVVNo);
		}

		Date CardExpiryDate = (Date)attributes.get("CardExpiryDate");

		if (CardExpiryDate != null) {
			setCardExpiryDate(CardExpiryDate);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String ChequePickupRequestId = (String)attributes.get(
				"ChequePickupRequestId");

		if (ChequePickupRequestId != null) {
			setChequePickupRequestId(ChequePickupRequestId);
		}

		String TransactionReferenceNo = (String)attributes.get(
				"TransactionReferenceNo");

		if (TransactionReferenceNo != null) {
			setTransactionReferenceNo(TransactionReferenceNo);
		}

		String BillDeskMerchantId = (String)attributes.get("BillDeskMerchantId");

		if (BillDeskMerchantId != null) {
			setBillDeskMerchantId(BillDeskMerchantId);
		}

		String BobMerchantTxnId = (String)attributes.get("BobMerchantTxnId");

		if (BobMerchantTxnId != null) {
			setBobMerchantTxnId(BobMerchantTxnId);
		}

		Long PaymentReceiptNo = (Long)attributes.get("PaymentReceiptNo");

		if (PaymentReceiptNo != null) {
			setPaymentReceiptNo(PaymentReceiptNo);
		}
	}

	@Override
	public int getPaymentId() {
		return _PaymentId;
	}

	@Override
	public void setPaymentId(int PaymentId) {
		_PaymentId = PaymentId;
	}

	@Override
	public String getPremiumFrequencyID() {
		if (_PremiumFrequencyID == null) {
			return StringPool.BLANK;
		}
		else {
			return _PremiumFrequencyID;
		}
	}

	@Override
	public void setPremiumFrequencyID(String PremiumFrequencyID) {
		_PremiumFrequencyID = PremiumFrequencyID;
	}

	@Override
	public int getTransactionStatusID() {
		return _TransactionStatusID;
	}

	@Override
	public void setTransactionStatusID(int TransactionStatusID) {
		_TransactionStatusID = TransactionStatusID;
	}

	@Override
	public String getRequestTypeID() {
		if (_RequestTypeID == null) {
			return StringPool.BLANK;
		}
		else {
			return _RequestTypeID;
		}
	}

	@Override
	public void setRequestTypeID(String RequestTypeID) {
		_RequestTypeID = RequestTypeID;
	}

	@Override
	public String getPaymentOptionId() {
		if (_PaymentOptionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _PaymentOptionId;
		}
	}

	@Override
	public void setPaymentOptionId(String PaymentOptionId) {
		_PaymentOptionId = PaymentOptionId;
	}

	@Override
	public String getPaymentMethodID() {
		if (_PaymentMethodID == null) {
			return StringPool.BLANK;
		}
		else {
			return _PaymentMethodID;
		}
	}

	@Override
	public void setPaymentMethodID(String PaymentMethodID) {
		_PaymentMethodID = PaymentMethodID;
	}

	@Override
	public String getProductID() {
		if (_ProductID == null) {
			return StringPool.BLANK;
		}
		else {
			return _ProductID;
		}
	}

	@Override
	public void setProductID(String ProductID) {
		_ProductID = ProductID;
	}

	@Override
	public String getProposalId() {
		if (_ProposalId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ProposalId;
		}
	}

	@Override
	public void setProposalId(String ProposalId) {
		_ProposalId = ProposalId;
	}

	@Override
	public double getPremiumAmount() {
		return _PremiumAmount;
	}

	@Override
	public void setPremiumAmount(double PremiumAmount) {
		_PremiumAmount = PremiumAmount;
	}

	@Override
	public String getBankName() {
		if (_BankName == null) {
			return StringPool.BLANK;
		}
		else {
			return _BankName;
		}
	}

	@Override
	public void setBankName(String BankName) {
		_BankName = BankName;
	}

	@Override
	public long getCreditCardNo() {
		return _CreditCardNo;
	}

	@Override
	public void setCreditCardNo(long CreditCardNo) {
		_CreditCardNo = CreditCardNo;
	}

	@Override
	public String getCardType() {
		if (_CardType == null) {
			return StringPool.BLANK;
		}
		else {
			return _CardType;
		}
	}

	@Override
	public void setCardType(String CardType) {
		_CardType = CardType;
	}

	@Override
	public String getNameAsCard() {
		if (_NameAsCard == null) {
			return StringPool.BLANK;
		}
		else {
			return _NameAsCard;
		}
	}

	@Override
	public void setNameAsCard(String NameAsCard) {
		_NameAsCard = NameAsCard;
	}

	@Override
	public int getCVVNo() {
		return _CVVNo;
	}

	@Override
	public void setCVVNo(int CVVNo) {
		_CVVNo = CVVNo;
	}

	@Override
	public Date getCardExpiryDate() {
		return _CardExpiryDate;
	}

	@Override
	public void setCardExpiryDate(Date CardExpiryDate) {
		_CardExpiryDate = CardExpiryDate;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public String getChequePickupRequestId() {
		if (_ChequePickupRequestId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ChequePickupRequestId;
		}
	}

	@Override
	public void setChequePickupRequestId(String ChequePickupRequestId) {
		_ChequePickupRequestId = ChequePickupRequestId;
	}

	@Override
	public String getTransactionReferenceNo() {
		if (_TransactionReferenceNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _TransactionReferenceNo;
		}
	}

	@Override
	public void setTransactionReferenceNo(String TransactionReferenceNo) {
		_TransactionReferenceNo = TransactionReferenceNo;
	}

	@Override
	public String getBillDeskMerchantId() {
		if (_BillDeskMerchantId == null) {
			return StringPool.BLANK;
		}
		else {
			return _BillDeskMerchantId;
		}
	}

	@Override
	public void setBillDeskMerchantId(String BillDeskMerchantId) {
		_BillDeskMerchantId = BillDeskMerchantId;
	}

	@Override
	public String getBobMerchantTxnId() {
		if (_BobMerchantTxnId == null) {
			return StringPool.BLANK;
		}
		else {
			return _BobMerchantTxnId;
		}
	}

	@Override
	public void setBobMerchantTxnId(String BobMerchantTxnId) {
		_BobMerchantTxnId = BobMerchantTxnId;
	}

	@Override
	public long getPaymentReceiptNo() {
		return _PaymentReceiptNo;
	}

	@Override
	public void setPaymentReceiptNo(long PaymentReceiptNo) {
		_PaymentReceiptNo = PaymentReceiptNo;
	}

	@Override
	public PaymentDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PaymentDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PaymentDetailsImpl paymentDetailsImpl = new PaymentDetailsImpl();

		paymentDetailsImpl.setPaymentId(getPaymentId());
		paymentDetailsImpl.setPremiumFrequencyID(getPremiumFrequencyID());
		paymentDetailsImpl.setTransactionStatusID(getTransactionStatusID());
		paymentDetailsImpl.setRequestTypeID(getRequestTypeID());
		paymentDetailsImpl.setPaymentOptionId(getPaymentOptionId());
		paymentDetailsImpl.setPaymentMethodID(getPaymentMethodID());
		paymentDetailsImpl.setProductID(getProductID());
		paymentDetailsImpl.setProposalId(getProposalId());
		paymentDetailsImpl.setPremiumAmount(getPremiumAmount());
		paymentDetailsImpl.setBankName(getBankName());
		paymentDetailsImpl.setCreditCardNo(getCreditCardNo());
		paymentDetailsImpl.setCardType(getCardType());
		paymentDetailsImpl.setNameAsCard(getNameAsCard());
		paymentDetailsImpl.setCVVNo(getCVVNo());
		paymentDetailsImpl.setCardExpiryDate(getCardExpiryDate());
		paymentDetailsImpl.setCreatedBy(getCreatedBy());
		paymentDetailsImpl.setCreatedDate(getCreatedDate());
		paymentDetailsImpl.setModifiedBy(getModifiedBy());
		paymentDetailsImpl.setModifiedDate(getModifiedDate());
		paymentDetailsImpl.setChequePickupRequestId(getChequePickupRequestId());
		paymentDetailsImpl.setTransactionReferenceNo(getTransactionReferenceNo());
		paymentDetailsImpl.setBillDeskMerchantId(getBillDeskMerchantId());
		paymentDetailsImpl.setBobMerchantTxnId(getBobMerchantTxnId());
		paymentDetailsImpl.setPaymentReceiptNo(getPaymentReceiptNo());

		paymentDetailsImpl.resetOriginalValues();

		return paymentDetailsImpl;
	}

	@Override
	public int compareTo(PaymentDetails paymentDetails) {
		int primaryKey = paymentDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PaymentDetails)) {
			return false;
		}

		PaymentDetails paymentDetails = (PaymentDetails)obj;

		int primaryKey = paymentDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PaymentDetails> toCacheModel() {
		PaymentDetailsCacheModel paymentDetailsCacheModel = new PaymentDetailsCacheModel();

		paymentDetailsCacheModel.PaymentId = getPaymentId();

		paymentDetailsCacheModel.PremiumFrequencyID = getPremiumFrequencyID();

		String PremiumFrequencyID = paymentDetailsCacheModel.PremiumFrequencyID;

		if ((PremiumFrequencyID != null) && (PremiumFrequencyID.length() == 0)) {
			paymentDetailsCacheModel.PremiumFrequencyID = null;
		}

		paymentDetailsCacheModel.TransactionStatusID = getTransactionStatusID();

		paymentDetailsCacheModel.RequestTypeID = getRequestTypeID();

		String RequestTypeID = paymentDetailsCacheModel.RequestTypeID;

		if ((RequestTypeID != null) && (RequestTypeID.length() == 0)) {
			paymentDetailsCacheModel.RequestTypeID = null;
		}

		paymentDetailsCacheModel.PaymentOptionId = getPaymentOptionId();

		String PaymentOptionId = paymentDetailsCacheModel.PaymentOptionId;

		if ((PaymentOptionId != null) && (PaymentOptionId.length() == 0)) {
			paymentDetailsCacheModel.PaymentOptionId = null;
		}

		paymentDetailsCacheModel.PaymentMethodID = getPaymentMethodID();

		String PaymentMethodID = paymentDetailsCacheModel.PaymentMethodID;

		if ((PaymentMethodID != null) && (PaymentMethodID.length() == 0)) {
			paymentDetailsCacheModel.PaymentMethodID = null;
		}

		paymentDetailsCacheModel.ProductID = getProductID();

		String ProductID = paymentDetailsCacheModel.ProductID;

		if ((ProductID != null) && (ProductID.length() == 0)) {
			paymentDetailsCacheModel.ProductID = null;
		}

		paymentDetailsCacheModel.ProposalId = getProposalId();

		String ProposalId = paymentDetailsCacheModel.ProposalId;

		if ((ProposalId != null) && (ProposalId.length() == 0)) {
			paymentDetailsCacheModel.ProposalId = null;
		}

		paymentDetailsCacheModel.PremiumAmount = getPremiumAmount();

		paymentDetailsCacheModel.BankName = getBankName();

		String BankName = paymentDetailsCacheModel.BankName;

		if ((BankName != null) && (BankName.length() == 0)) {
			paymentDetailsCacheModel.BankName = null;
		}

		paymentDetailsCacheModel.CreditCardNo = getCreditCardNo();

		paymentDetailsCacheModel.CardType = getCardType();

		String CardType = paymentDetailsCacheModel.CardType;

		if ((CardType != null) && (CardType.length() == 0)) {
			paymentDetailsCacheModel.CardType = null;
		}

		paymentDetailsCacheModel.NameAsCard = getNameAsCard();

		String NameAsCard = paymentDetailsCacheModel.NameAsCard;

		if ((NameAsCard != null) && (NameAsCard.length() == 0)) {
			paymentDetailsCacheModel.NameAsCard = null;
		}

		paymentDetailsCacheModel.CVVNo = getCVVNo();

		Date CardExpiryDate = getCardExpiryDate();

		if (CardExpiryDate != null) {
			paymentDetailsCacheModel.CardExpiryDate = CardExpiryDate.getTime();
		}
		else {
			paymentDetailsCacheModel.CardExpiryDate = Long.MIN_VALUE;
		}

		paymentDetailsCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = paymentDetailsCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			paymentDetailsCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			paymentDetailsCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			paymentDetailsCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		paymentDetailsCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = paymentDetailsCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			paymentDetailsCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			paymentDetailsCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			paymentDetailsCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		paymentDetailsCacheModel.ChequePickupRequestId = getChequePickupRequestId();

		String ChequePickupRequestId = paymentDetailsCacheModel.ChequePickupRequestId;

		if ((ChequePickupRequestId != null) &&
				(ChequePickupRequestId.length() == 0)) {
			paymentDetailsCacheModel.ChequePickupRequestId = null;
		}

		paymentDetailsCacheModel.TransactionReferenceNo = getTransactionReferenceNo();

		String TransactionReferenceNo = paymentDetailsCacheModel.TransactionReferenceNo;

		if ((TransactionReferenceNo != null) &&
				(TransactionReferenceNo.length() == 0)) {
			paymentDetailsCacheModel.TransactionReferenceNo = null;
		}

		paymentDetailsCacheModel.BillDeskMerchantId = getBillDeskMerchantId();

		String BillDeskMerchantId = paymentDetailsCacheModel.BillDeskMerchantId;

		if ((BillDeskMerchantId != null) && (BillDeskMerchantId.length() == 0)) {
			paymentDetailsCacheModel.BillDeskMerchantId = null;
		}

		paymentDetailsCacheModel.BobMerchantTxnId = getBobMerchantTxnId();

		String BobMerchantTxnId = paymentDetailsCacheModel.BobMerchantTxnId;

		if ((BobMerchantTxnId != null) && (BobMerchantTxnId.length() == 0)) {
			paymentDetailsCacheModel.BobMerchantTxnId = null;
		}

		paymentDetailsCacheModel.PaymentReceiptNo = getPaymentReceiptNo();

		return paymentDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{PaymentId=");
		sb.append(getPaymentId());
		sb.append(", PremiumFrequencyID=");
		sb.append(getPremiumFrequencyID());
		sb.append(", TransactionStatusID=");
		sb.append(getTransactionStatusID());
		sb.append(", RequestTypeID=");
		sb.append(getRequestTypeID());
		sb.append(", PaymentOptionId=");
		sb.append(getPaymentOptionId());
		sb.append(", PaymentMethodID=");
		sb.append(getPaymentMethodID());
		sb.append(", ProductID=");
		sb.append(getProductID());
		sb.append(", ProposalId=");
		sb.append(getProposalId());
		sb.append(", PremiumAmount=");
		sb.append(getPremiumAmount());
		sb.append(", BankName=");
		sb.append(getBankName());
		sb.append(", CreditCardNo=");
		sb.append(getCreditCardNo());
		sb.append(", CardType=");
		sb.append(getCardType());
		sb.append(", NameAsCard=");
		sb.append(getNameAsCard());
		sb.append(", CVVNo=");
		sb.append(getCVVNo());
		sb.append(", CardExpiryDate=");
		sb.append(getCardExpiryDate());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ChequePickupRequestId=");
		sb.append(getChequePickupRequestId());
		sb.append(", TransactionReferenceNo=");
		sb.append(getTransactionReferenceNo());
		sb.append(", BillDeskMerchantId=");
		sb.append(getBillDeskMerchantId());
		sb.append(", BobMerchantTxnId=");
		sb.append(getBobMerchantTxnId());
		sb.append(", PaymentReceiptNo=");
		sb.append(getPaymentReceiptNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PaymentDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PaymentId</column-name><column-value><![CDATA[");
		sb.append(getPaymentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PremiumFrequencyID</column-name><column-value><![CDATA[");
		sb.append(getPremiumFrequencyID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TransactionStatusID</column-name><column-value><![CDATA[");
		sb.append(getTransactionStatusID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RequestTypeID</column-name><column-value><![CDATA[");
		sb.append(getRequestTypeID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PaymentOptionId</column-name><column-value><![CDATA[");
		sb.append(getPaymentOptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PaymentMethodID</column-name><column-value><![CDATA[");
		sb.append(getPaymentMethodID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ProductID</column-name><column-value><![CDATA[");
		sb.append(getProductID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ProposalId</column-name><column-value><![CDATA[");
		sb.append(getProposalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PremiumAmount</column-name><column-value><![CDATA[");
		sb.append(getPremiumAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BankName</column-name><column-value><![CDATA[");
		sb.append(getBankName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreditCardNo</column-name><column-value><![CDATA[");
		sb.append(getCreditCardNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CardType</column-name><column-value><![CDATA[");
		sb.append(getCardType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NameAsCard</column-name><column-value><![CDATA[");
		sb.append(getNameAsCard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CVVNo</column-name><column-value><![CDATA[");
		sb.append(getCVVNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CardExpiryDate</column-name><column-value><![CDATA[");
		sb.append(getCardExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ChequePickupRequestId</column-name><column-value><![CDATA[");
		sb.append(getChequePickupRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TransactionReferenceNo</column-name><column-value><![CDATA[");
		sb.append(getTransactionReferenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BillDeskMerchantId</column-name><column-value><![CDATA[");
		sb.append(getBillDeskMerchantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BobMerchantTxnId</column-name><column-value><![CDATA[");
		sb.append(getBobMerchantTxnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PaymentReceiptNo</column-name><column-value><![CDATA[");
		sb.append(getPaymentReceiptNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PaymentDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PaymentDetails.class
		};
	private int _PaymentId;
	private String _PremiumFrequencyID;
	private int _TransactionStatusID;
	private String _RequestTypeID;
	private String _PaymentOptionId;
	private String _PaymentMethodID;
	private String _ProductID;
	private String _ProposalId;
	private double _PremiumAmount;
	private String _BankName;
	private long _CreditCardNo;
	private String _CardType;
	private String _NameAsCard;
	private int _CVVNo;
	private Date _CardExpiryDate;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private String _ChequePickupRequestId;
	private String _TransactionReferenceNo;
	private String _BillDeskMerchantId;
	private String _BobMerchantTxnId;
	private long _PaymentReceiptNo;
	private PaymentDetails _escapedModel;
}