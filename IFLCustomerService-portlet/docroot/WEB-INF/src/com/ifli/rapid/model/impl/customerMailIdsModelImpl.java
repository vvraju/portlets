/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.customerMailIds;
import com.ifli.rapid.model.customerMailIdsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the customerMailIds service. Represents a row in the &quot;customer_mailids&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.customerMailIdsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link customerMailIdsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see customerMailIdsImpl
 * @see com.ifli.rapid.model.customerMailIds
 * @see com.ifli.rapid.model.customerMailIdsModel
 * @generated
 */
public class customerMailIdsModelImpl extends BaseModelImpl<customerMailIds>
	implements customerMailIdsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer mail IDs model instance should use the {@link com.ifli.rapid.model.customerMailIds} interface instead.
	 */
	public static final String TABLE_NAME = "customer_mailids";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "CUSTOMER_ID", Types.INTEGER },
			{ "EMAIL_ID", Types.VARCHAR },
			{ "INSERTED_BY", Types.VARCHAR },
			{ "INSERTED_DATE", Types.TIMESTAMP },
			{ "UPDATED_BY", Types.VARCHAR },
			{ "UPDATED_DATE", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table customer_mailids (ID INTEGER not null primary key,CUSTOMER_ID INTEGER,EMAIL_ID VARCHAR(75) null,INSERTED_BY VARCHAR(75) null,INSERTED_DATE DATE null,UPDATED_BY VARCHAR(75) null,UPDATED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table customer_mailids";
	public static final String ORDER_BY_JPQL = " ORDER BY customerMailIds.ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY customer_mailids.ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.customerMailIds"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.customerMailIds"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.customerMailIds"));

	public customerMailIdsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return customerMailIds.class;
	}

	@Override
	public String getModelClassName() {
		return customerMailIds.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("CUSTOMER_ID", getCUSTOMER_ID());
		attributes.put("EMAIL_ID", getEMAIL_ID());
		attributes.put("INSERTED_BY", getINSERTED_BY());
		attributes.put("INSERTED_DATE", getINSERTED_DATE());
		attributes.put("UPDATED_BY", getUPDATED_BY());
		attributes.put("UPDATED_DATE", getUPDATED_DATE());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ID = (Integer)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		Integer CUSTOMER_ID = (Integer)attributes.get("CUSTOMER_ID");

		if (CUSTOMER_ID != null) {
			setCUSTOMER_ID(CUSTOMER_ID);
		}

		String EMAIL_ID = (String)attributes.get("EMAIL_ID");

		if (EMAIL_ID != null) {
			setEMAIL_ID(EMAIL_ID);
		}

		String INSERTED_BY = (String)attributes.get("INSERTED_BY");

		if (INSERTED_BY != null) {
			setINSERTED_BY(INSERTED_BY);
		}

		Date INSERTED_DATE = (Date)attributes.get("INSERTED_DATE");

		if (INSERTED_DATE != null) {
			setINSERTED_DATE(INSERTED_DATE);
		}

		String UPDATED_BY = (String)attributes.get("UPDATED_BY");

		if (UPDATED_BY != null) {
			setUPDATED_BY(UPDATED_BY);
		}

		Date UPDATED_DATE = (Date)attributes.get("UPDATED_DATE");

		if (UPDATED_DATE != null) {
			setUPDATED_DATE(UPDATED_DATE);
		}
	}

	@Override
	public int getID() {
		return _ID;
	}

	@Override
	public void setID(int ID) {
		_ID = ID;
	}

	@Override
	public int getCUSTOMER_ID() {
		return _CUSTOMER_ID;
	}

	@Override
	public void setCUSTOMER_ID(int CUSTOMER_ID) {
		_CUSTOMER_ID = CUSTOMER_ID;
	}

	@Override
	public String getEMAIL_ID() {
		if (_EMAIL_ID == null) {
			return StringPool.BLANK;
		}
		else {
			return _EMAIL_ID;
		}
	}

	@Override
	public void setEMAIL_ID(String EMAIL_ID) {
		_EMAIL_ID = EMAIL_ID;
	}

	@Override
	public String getINSERTED_BY() {
		if (_INSERTED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _INSERTED_BY;
		}
	}

	@Override
	public void setINSERTED_BY(String INSERTED_BY) {
		_INSERTED_BY = INSERTED_BY;
	}

	@Override
	public Date getINSERTED_DATE() {
		return _INSERTED_DATE;
	}

	@Override
	public void setINSERTED_DATE(Date INSERTED_DATE) {
		_INSERTED_DATE = INSERTED_DATE;
	}

	@Override
	public String getUPDATED_BY() {
		if (_UPDATED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _UPDATED_BY;
		}
	}

	@Override
	public void setUPDATED_BY(String UPDATED_BY) {
		_UPDATED_BY = UPDATED_BY;
	}

	@Override
	public Date getUPDATED_DATE() {
		return _UPDATED_DATE;
	}

	@Override
	public void setUPDATED_DATE(Date UPDATED_DATE) {
		_UPDATED_DATE = UPDATED_DATE;
	}

	@Override
	public customerMailIds toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (customerMailIds)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		customerMailIdsImpl customerMailIdsImpl = new customerMailIdsImpl();

		customerMailIdsImpl.setID(getID());
		customerMailIdsImpl.setCUSTOMER_ID(getCUSTOMER_ID());
		customerMailIdsImpl.setEMAIL_ID(getEMAIL_ID());
		customerMailIdsImpl.setINSERTED_BY(getINSERTED_BY());
		customerMailIdsImpl.setINSERTED_DATE(getINSERTED_DATE());
		customerMailIdsImpl.setUPDATED_BY(getUPDATED_BY());
		customerMailIdsImpl.setUPDATED_DATE(getUPDATED_DATE());

		customerMailIdsImpl.resetOriginalValues();

		return customerMailIdsImpl;
	}

	@Override
	public int compareTo(customerMailIds customerMailIds) {
		int primaryKey = customerMailIds.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof customerMailIds)) {
			return false;
		}

		customerMailIds customerMailIds = (customerMailIds)obj;

		int primaryKey = customerMailIds.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<customerMailIds> toCacheModel() {
		customerMailIdsCacheModel customerMailIdsCacheModel = new customerMailIdsCacheModel();

		customerMailIdsCacheModel.ID = getID();

		customerMailIdsCacheModel.CUSTOMER_ID = getCUSTOMER_ID();

		customerMailIdsCacheModel.EMAIL_ID = getEMAIL_ID();

		String EMAIL_ID = customerMailIdsCacheModel.EMAIL_ID;

		if ((EMAIL_ID != null) && (EMAIL_ID.length() == 0)) {
			customerMailIdsCacheModel.EMAIL_ID = null;
		}

		customerMailIdsCacheModel.INSERTED_BY = getINSERTED_BY();

		String INSERTED_BY = customerMailIdsCacheModel.INSERTED_BY;

		if ((INSERTED_BY != null) && (INSERTED_BY.length() == 0)) {
			customerMailIdsCacheModel.INSERTED_BY = null;
		}

		Date INSERTED_DATE = getINSERTED_DATE();

		if (INSERTED_DATE != null) {
			customerMailIdsCacheModel.INSERTED_DATE = INSERTED_DATE.getTime();
		}
		else {
			customerMailIdsCacheModel.INSERTED_DATE = Long.MIN_VALUE;
		}

		customerMailIdsCacheModel.UPDATED_BY = getUPDATED_BY();

		String UPDATED_BY = customerMailIdsCacheModel.UPDATED_BY;

		if ((UPDATED_BY != null) && (UPDATED_BY.length() == 0)) {
			customerMailIdsCacheModel.UPDATED_BY = null;
		}

		Date UPDATED_DATE = getUPDATED_DATE();

		if (UPDATED_DATE != null) {
			customerMailIdsCacheModel.UPDATED_DATE = UPDATED_DATE.getTime();
		}
		else {
			customerMailIdsCacheModel.UPDATED_DATE = Long.MIN_VALUE;
		}

		return customerMailIdsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", CUSTOMER_ID=");
		sb.append(getCUSTOMER_ID());
		sb.append(", EMAIL_ID=");
		sb.append(getEMAIL_ID());
		sb.append(", INSERTED_BY=");
		sb.append(getINSERTED_BY());
		sb.append(", INSERTED_DATE=");
		sb.append(getINSERTED_DATE());
		sb.append(", UPDATED_BY=");
		sb.append(getUPDATED_BY());
		sb.append(", UPDATED_DATE=");
		sb.append(getUPDATED_DATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.customerMailIds");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CUSTOMER_ID</column-name><column-value><![CDATA[");
		sb.append(getCUSTOMER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EMAIL_ID</column-name><column-value><![CDATA[");
		sb.append(getEMAIL_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_BY</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_DATE</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_BY</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_DATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = customerMailIds.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			customerMailIds.class
		};
	private int _ID;
	private int _CUSTOMER_ID;
	private String _EMAIL_ID;
	private String _INSERTED_BY;
	private Date _INSERTED_DATE;
	private String _UPDATED_BY;
	private Date _UPDATED_DATE;
	private customerMailIds _escapedModel;
}