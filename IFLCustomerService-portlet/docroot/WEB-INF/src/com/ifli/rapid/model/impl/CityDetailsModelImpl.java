/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.CityDetails;
import com.ifli.rapid.model.CityDetailsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CityDetails service. Represents a row in the &quot;city_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.CityDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CityDetailsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see CityDetailsImpl
 * @see com.ifli.rapid.model.CityDetails
 * @see com.ifli.rapid.model.CityDetailsModel
 * @generated
 */
public class CityDetailsModelImpl extends BaseModelImpl<CityDetails>
	implements CityDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a city details model instance should use the {@link com.ifli.rapid.model.CityDetails} interface instead.
	 */
	public static final String TABLE_NAME = "city_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CITY_ID", Types.INTEGER },
			{ "CITY_CODE", Types.VARCHAR },
			{ "CITY_NAME", Types.VARCHAR },
			{ "STATE_ID", Types.INTEGER },
			{ "IS_ACTIVE", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table city_details (CITY_ID INTEGER not null primary key,CITY_CODE VARCHAR(75) null,CITY_NAME VARCHAR(75) null,STATE_ID INTEGER,IS_ACTIVE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table city_details";
	public static final String ORDER_BY_JPQL = " ORDER BY cityDetails.CITY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY city_details.CITY_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.CityDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.CityDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.CityDetails"));

	public CityDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _CITY_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setCITY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CITY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CityDetails.class;
	}

	@Override
	public String getModelClassName() {
		return CityDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("CITY_ID", getCITY_ID());
		attributes.put("CITY_CODE", getCITY_CODE());
		attributes.put("CITY_NAME", getCITY_NAME());
		attributes.put("STATE_ID", getSTATE_ID());
		attributes.put("IS_ACTIVE", getIS_ACTIVE());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer CITY_ID = (Integer)attributes.get("CITY_ID");

		if (CITY_ID != null) {
			setCITY_ID(CITY_ID);
		}

		String CITY_CODE = (String)attributes.get("CITY_CODE");

		if (CITY_CODE != null) {
			setCITY_CODE(CITY_CODE);
		}

		String CITY_NAME = (String)attributes.get("CITY_NAME");

		if (CITY_NAME != null) {
			setCITY_NAME(CITY_NAME);
		}

		Integer STATE_ID = (Integer)attributes.get("STATE_ID");

		if (STATE_ID != null) {
			setSTATE_ID(STATE_ID);
		}

		String IS_ACTIVE = (String)attributes.get("IS_ACTIVE");

		if (IS_ACTIVE != null) {
			setIS_ACTIVE(IS_ACTIVE);
		}
	}

	@Override
	public int getCITY_ID() {
		return _CITY_ID;
	}

	@Override
	public void setCITY_ID(int CITY_ID) {
		_CITY_ID = CITY_ID;
	}

	@Override
	public String getCITY_CODE() {
		if (_CITY_CODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _CITY_CODE;
		}
	}

	@Override
	public void setCITY_CODE(String CITY_CODE) {
		_CITY_CODE = CITY_CODE;
	}

	@Override
	public String getCITY_NAME() {
		if (_CITY_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _CITY_NAME;
		}
	}

	@Override
	public void setCITY_NAME(String CITY_NAME) {
		_CITY_NAME = CITY_NAME;
	}

	@Override
	public int getSTATE_ID() {
		return _STATE_ID;
	}

	@Override
	public void setSTATE_ID(int STATE_ID) {
		_STATE_ID = STATE_ID;
	}

	@Override
	public String getIS_ACTIVE() {
		if (_IS_ACTIVE == null) {
			return StringPool.BLANK;
		}
		else {
			return _IS_ACTIVE;
		}
	}

	@Override
	public void setIS_ACTIVE(String IS_ACTIVE) {
		_IS_ACTIVE = IS_ACTIVE;
	}

	@Override
	public CityDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CityDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CityDetailsImpl cityDetailsImpl = new CityDetailsImpl();

		cityDetailsImpl.setCITY_ID(getCITY_ID());
		cityDetailsImpl.setCITY_CODE(getCITY_CODE());
		cityDetailsImpl.setCITY_NAME(getCITY_NAME());
		cityDetailsImpl.setSTATE_ID(getSTATE_ID());
		cityDetailsImpl.setIS_ACTIVE(getIS_ACTIVE());

		cityDetailsImpl.resetOriginalValues();

		return cityDetailsImpl;
	}

	@Override
	public int compareTo(CityDetails cityDetails) {
		int primaryKey = cityDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CityDetails)) {
			return false;
		}

		CityDetails cityDetails = (CityDetails)obj;

		int primaryKey = cityDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CityDetails> toCacheModel() {
		CityDetailsCacheModel cityDetailsCacheModel = new CityDetailsCacheModel();

		cityDetailsCacheModel.CITY_ID = getCITY_ID();

		cityDetailsCacheModel.CITY_CODE = getCITY_CODE();

		String CITY_CODE = cityDetailsCacheModel.CITY_CODE;

		if ((CITY_CODE != null) && (CITY_CODE.length() == 0)) {
			cityDetailsCacheModel.CITY_CODE = null;
		}

		cityDetailsCacheModel.CITY_NAME = getCITY_NAME();

		String CITY_NAME = cityDetailsCacheModel.CITY_NAME;

		if ((CITY_NAME != null) && (CITY_NAME.length() == 0)) {
			cityDetailsCacheModel.CITY_NAME = null;
		}

		cityDetailsCacheModel.STATE_ID = getSTATE_ID();

		cityDetailsCacheModel.IS_ACTIVE = getIS_ACTIVE();

		String IS_ACTIVE = cityDetailsCacheModel.IS_ACTIVE;

		if ((IS_ACTIVE != null) && (IS_ACTIVE.length() == 0)) {
			cityDetailsCacheModel.IS_ACTIVE = null;
		}

		return cityDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{CITY_ID=");
		sb.append(getCITY_ID());
		sb.append(", CITY_CODE=");
		sb.append(getCITY_CODE());
		sb.append(", CITY_NAME=");
		sb.append(getCITY_NAME());
		sb.append(", STATE_ID=");
		sb.append(getSTATE_ID());
		sb.append(", IS_ACTIVE=");
		sb.append(getIS_ACTIVE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.CityDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>CITY_ID</column-name><column-value><![CDATA[");
		sb.append(getCITY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CITY_CODE</column-name><column-value><![CDATA[");
		sb.append(getCITY_CODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CITY_NAME</column-name><column-value><![CDATA[");
		sb.append(getCITY_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATE_ID</column-name><column-value><![CDATA[");
		sb.append(getSTATE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IS_ACTIVE</column-name><column-value><![CDATA[");
		sb.append(getIS_ACTIVE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CityDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CityDetails.class
		};
	private int _CITY_ID;
	private String _CITY_CODE;
	private String _CITY_NAME;
	private int _STATE_ID;
	private String _IS_ACTIVE;
	private CityDetails _escapedModel;
}