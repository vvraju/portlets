/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.PolicyFundSwitchDetails;
import com.ifli.rapid.model.PolicyFundSwitchDetailsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PolicyFundSwitchDetails service. Represents a row in the &quot;policy_fund_switch_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.PolicyFundSwitchDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyFundSwitchDetailsImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see PolicyFundSwitchDetailsImpl
 * @see com.ifli.rapid.model.PolicyFundSwitchDetails
 * @see com.ifli.rapid.model.PolicyFundSwitchDetailsModel
 * @generated
 */
public class PolicyFundSwitchDetailsModelImpl extends BaseModelImpl<PolicyFundSwitchDetails>
	implements PolicyFundSwitchDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy fund switch details model instance should use the {@link com.ifli.rapid.model.PolicyFundSwitchDetails} interface instead.
	 */
	public static final String TABLE_NAME = "policy_fund_switch_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FUND_SWITCH_ID", Types.INTEGER },
			{ "POLICY_ID", Types.VARCHAR },
			{ "QRC_ASR_ID", Types.INTEGER },
			{ "FUND_FROM", Types.VARCHAR },
			{ "FUND_TO", Types.VARCHAR },
			{ "PRECENTAGE_OF_UNITS", Types.DOUBLE },
			{ "INSERTED_DATE", Types.TIMESTAMP },
			{ "INSERTED_BY", Types.VARCHAR },
			{ "UPDATED_DATE", Types.TIMESTAMP },
			{ "UPDATED_BY", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table policy_fund_switch_details (FUND_SWITCH_ID INTEGER not null primary key IDENTITY,POLICY_ID VARCHAR(75) null,QRC_ASR_ID INTEGER,FUND_FROM VARCHAR(75) null,FUND_TO VARCHAR(75) null,PRECENTAGE_OF_UNITS DOUBLE,INSERTED_DATE DATE null,INSERTED_BY VARCHAR(75) null,UPDATED_DATE DATE null,UPDATED_BY VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table policy_fund_switch_details";
	public static final String ORDER_BY_JPQL = " ORDER BY policyFundSwitchDetails.FUND_SWITCH_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY policy_fund_switch_details.FUND_SWITCH_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.PolicyFundSwitchDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.PolicyFundSwitchDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.PolicyFundSwitchDetails"));

	public PolicyFundSwitchDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _FUND_SWITCH_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setFUND_SWITCH_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _FUND_SWITCH_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyFundSwitchDetails.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyFundSwitchDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("FUND_SWITCH_ID", getFUND_SWITCH_ID());
		attributes.put("POLICY_ID", getPOLICY_ID());
		attributes.put("QRC_ASR_ID", getQRC_ASR_ID());
		attributes.put("FUND_FROM", getFUND_FROM());
		attributes.put("FUND_TO", getFUND_TO());
		attributes.put("PRECENTAGE_OF_UNITS", getPRECENTAGE_OF_UNITS());
		attributes.put("INSERTED_DATE", getINSERTED_DATE());
		attributes.put("INSERTED_BY", getINSERTED_BY());
		attributes.put("UPDATED_DATE", getUPDATED_DATE());
		attributes.put("UPDATED_BY", getUPDATED_BY());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer FUND_SWITCH_ID = (Integer)attributes.get("FUND_SWITCH_ID");

		if (FUND_SWITCH_ID != null) {
			setFUND_SWITCH_ID(FUND_SWITCH_ID);
		}

		String POLICY_ID = (String)attributes.get("POLICY_ID");

		if (POLICY_ID != null) {
			setPOLICY_ID(POLICY_ID);
		}

		Integer QRC_ASR_ID = (Integer)attributes.get("QRC_ASR_ID");

		if (QRC_ASR_ID != null) {
			setQRC_ASR_ID(QRC_ASR_ID);
		}

		String FUND_FROM = (String)attributes.get("FUND_FROM");

		if (FUND_FROM != null) {
			setFUND_FROM(FUND_FROM);
		}

		String FUND_TO = (String)attributes.get("FUND_TO");

		if (FUND_TO != null) {
			setFUND_TO(FUND_TO);
		}

		Double PRECENTAGE_OF_UNITS = (Double)attributes.get(
				"PRECENTAGE_OF_UNITS");

		if (PRECENTAGE_OF_UNITS != null) {
			setPRECENTAGE_OF_UNITS(PRECENTAGE_OF_UNITS);
		}

		Date INSERTED_DATE = (Date)attributes.get("INSERTED_DATE");

		if (INSERTED_DATE != null) {
			setINSERTED_DATE(INSERTED_DATE);
		}

		String INSERTED_BY = (String)attributes.get("INSERTED_BY");

		if (INSERTED_BY != null) {
			setINSERTED_BY(INSERTED_BY);
		}

		Date UPDATED_DATE = (Date)attributes.get("UPDATED_DATE");

		if (UPDATED_DATE != null) {
			setUPDATED_DATE(UPDATED_DATE);
		}

		String UPDATED_BY = (String)attributes.get("UPDATED_BY");

		if (UPDATED_BY != null) {
			setUPDATED_BY(UPDATED_BY);
		}
	}

	@Override
	public int getFUND_SWITCH_ID() {
		return _FUND_SWITCH_ID;
	}

	@Override
	public void setFUND_SWITCH_ID(int FUND_SWITCH_ID) {
		_FUND_SWITCH_ID = FUND_SWITCH_ID;
	}

	@Override
	public String getPOLICY_ID() {
		if (_POLICY_ID == null) {
			return StringPool.BLANK;
		}
		else {
			return _POLICY_ID;
		}
	}

	@Override
	public void setPOLICY_ID(String POLICY_ID) {
		_POLICY_ID = POLICY_ID;
	}

	@Override
	public int getQRC_ASR_ID() {
		return _QRC_ASR_ID;
	}

	@Override
	public void setQRC_ASR_ID(int QRC_ASR_ID) {
		_QRC_ASR_ID = QRC_ASR_ID;
	}

	@Override
	public String getFUND_FROM() {
		if (_FUND_FROM == null) {
			return StringPool.BLANK;
		}
		else {
			return _FUND_FROM;
		}
	}

	@Override
	public void setFUND_FROM(String FUND_FROM) {
		_FUND_FROM = FUND_FROM;
	}

	@Override
	public String getFUND_TO() {
		if (_FUND_TO == null) {
			return StringPool.BLANK;
		}
		else {
			return _FUND_TO;
		}
	}

	@Override
	public void setFUND_TO(String FUND_TO) {
		_FUND_TO = FUND_TO;
	}

	@Override
	public double getPRECENTAGE_OF_UNITS() {
		return _PRECENTAGE_OF_UNITS;
	}

	@Override
	public void setPRECENTAGE_OF_UNITS(double PRECENTAGE_OF_UNITS) {
		_PRECENTAGE_OF_UNITS = PRECENTAGE_OF_UNITS;
	}

	@Override
	public Date getINSERTED_DATE() {
		return _INSERTED_DATE;
	}

	@Override
	public void setINSERTED_DATE(Date INSERTED_DATE) {
		_INSERTED_DATE = INSERTED_DATE;
	}

	@Override
	public String getINSERTED_BY() {
		if (_INSERTED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _INSERTED_BY;
		}
	}

	@Override
	public void setINSERTED_BY(String INSERTED_BY) {
		_INSERTED_BY = INSERTED_BY;
	}

	@Override
	public Date getUPDATED_DATE() {
		return _UPDATED_DATE;
	}

	@Override
	public void setUPDATED_DATE(Date UPDATED_DATE) {
		_UPDATED_DATE = UPDATED_DATE;
	}

	@Override
	public String getUPDATED_BY() {
		if (_UPDATED_BY == null) {
			return StringPool.BLANK;
		}
		else {
			return _UPDATED_BY;
		}
	}

	@Override
	public void setUPDATED_BY(String UPDATED_BY) {
		_UPDATED_BY = UPDATED_BY;
	}

	@Override
	public PolicyFundSwitchDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PolicyFundSwitchDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyFundSwitchDetailsImpl policyFundSwitchDetailsImpl = new PolicyFundSwitchDetailsImpl();

		policyFundSwitchDetailsImpl.setFUND_SWITCH_ID(getFUND_SWITCH_ID());
		policyFundSwitchDetailsImpl.setPOLICY_ID(getPOLICY_ID());
		policyFundSwitchDetailsImpl.setQRC_ASR_ID(getQRC_ASR_ID());
		policyFundSwitchDetailsImpl.setFUND_FROM(getFUND_FROM());
		policyFundSwitchDetailsImpl.setFUND_TO(getFUND_TO());
		policyFundSwitchDetailsImpl.setPRECENTAGE_OF_UNITS(getPRECENTAGE_OF_UNITS());
		policyFundSwitchDetailsImpl.setINSERTED_DATE(getINSERTED_DATE());
		policyFundSwitchDetailsImpl.setINSERTED_BY(getINSERTED_BY());
		policyFundSwitchDetailsImpl.setUPDATED_DATE(getUPDATED_DATE());
		policyFundSwitchDetailsImpl.setUPDATED_BY(getUPDATED_BY());

		policyFundSwitchDetailsImpl.resetOriginalValues();

		return policyFundSwitchDetailsImpl;
	}

	@Override
	public int compareTo(PolicyFundSwitchDetails policyFundSwitchDetails) {
		int primaryKey = policyFundSwitchDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PolicyFundSwitchDetails)) {
			return false;
		}

		PolicyFundSwitchDetails policyFundSwitchDetails = (PolicyFundSwitchDetails)obj;

		int primaryKey = policyFundSwitchDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PolicyFundSwitchDetails> toCacheModel() {
		PolicyFundSwitchDetailsCacheModel policyFundSwitchDetailsCacheModel = new PolicyFundSwitchDetailsCacheModel();

		policyFundSwitchDetailsCacheModel.FUND_SWITCH_ID = getFUND_SWITCH_ID();

		policyFundSwitchDetailsCacheModel.POLICY_ID = getPOLICY_ID();

		String POLICY_ID = policyFundSwitchDetailsCacheModel.POLICY_ID;

		if ((POLICY_ID != null) && (POLICY_ID.length() == 0)) {
			policyFundSwitchDetailsCacheModel.POLICY_ID = null;
		}

		policyFundSwitchDetailsCacheModel.QRC_ASR_ID = getQRC_ASR_ID();

		policyFundSwitchDetailsCacheModel.FUND_FROM = getFUND_FROM();

		String FUND_FROM = policyFundSwitchDetailsCacheModel.FUND_FROM;

		if ((FUND_FROM != null) && (FUND_FROM.length() == 0)) {
			policyFundSwitchDetailsCacheModel.FUND_FROM = null;
		}

		policyFundSwitchDetailsCacheModel.FUND_TO = getFUND_TO();

		String FUND_TO = policyFundSwitchDetailsCacheModel.FUND_TO;

		if ((FUND_TO != null) && (FUND_TO.length() == 0)) {
			policyFundSwitchDetailsCacheModel.FUND_TO = null;
		}

		policyFundSwitchDetailsCacheModel.PRECENTAGE_OF_UNITS = getPRECENTAGE_OF_UNITS();

		Date INSERTED_DATE = getINSERTED_DATE();

		if (INSERTED_DATE != null) {
			policyFundSwitchDetailsCacheModel.INSERTED_DATE = INSERTED_DATE.getTime();
		}
		else {
			policyFundSwitchDetailsCacheModel.INSERTED_DATE = Long.MIN_VALUE;
		}

		policyFundSwitchDetailsCacheModel.INSERTED_BY = getINSERTED_BY();

		String INSERTED_BY = policyFundSwitchDetailsCacheModel.INSERTED_BY;

		if ((INSERTED_BY != null) && (INSERTED_BY.length() == 0)) {
			policyFundSwitchDetailsCacheModel.INSERTED_BY = null;
		}

		Date UPDATED_DATE = getUPDATED_DATE();

		if (UPDATED_DATE != null) {
			policyFundSwitchDetailsCacheModel.UPDATED_DATE = UPDATED_DATE.getTime();
		}
		else {
			policyFundSwitchDetailsCacheModel.UPDATED_DATE = Long.MIN_VALUE;
		}

		policyFundSwitchDetailsCacheModel.UPDATED_BY = getUPDATED_BY();

		String UPDATED_BY = policyFundSwitchDetailsCacheModel.UPDATED_BY;

		if ((UPDATED_BY != null) && (UPDATED_BY.length() == 0)) {
			policyFundSwitchDetailsCacheModel.UPDATED_BY = null;
		}

		return policyFundSwitchDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{FUND_SWITCH_ID=");
		sb.append(getFUND_SWITCH_ID());
		sb.append(", POLICY_ID=");
		sb.append(getPOLICY_ID());
		sb.append(", QRC_ASR_ID=");
		sb.append(getQRC_ASR_ID());
		sb.append(", FUND_FROM=");
		sb.append(getFUND_FROM());
		sb.append(", FUND_TO=");
		sb.append(getFUND_TO());
		sb.append(", PRECENTAGE_OF_UNITS=");
		sb.append(getPRECENTAGE_OF_UNITS());
		sb.append(", INSERTED_DATE=");
		sb.append(getINSERTED_DATE());
		sb.append(", INSERTED_BY=");
		sb.append(getINSERTED_BY());
		sb.append(", UPDATED_DATE=");
		sb.append(getUPDATED_DATE());
		sb.append(", UPDATED_BY=");
		sb.append(getUPDATED_BY());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.PolicyFundSwitchDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>FUND_SWITCH_ID</column-name><column-value><![CDATA[");
		sb.append(getFUND_SWITCH_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>POLICY_ID</column-name><column-value><![CDATA[");
		sb.append(getPOLICY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>QRC_ASR_ID</column-name><column-value><![CDATA[");
		sb.append(getQRC_ASR_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_FROM</column-name><column-value><![CDATA[");
		sb.append(getFUND_FROM());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FUND_TO</column-name><column-value><![CDATA[");
		sb.append(getFUND_TO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PRECENTAGE_OF_UNITS</column-name><column-value><![CDATA[");
		sb.append(getPRECENTAGE_OF_UNITS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_DATE</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INSERTED_BY</column-name><column-value><![CDATA[");
		sb.append(getINSERTED_BY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATED_BY</column-name><column-value><![CDATA[");
		sb.append(getUPDATED_BY());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PolicyFundSwitchDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PolicyFundSwitchDetails.class
		};
	private int _FUND_SWITCH_ID;
	private String _POLICY_ID;
	private int _QRC_ASR_ID;
	private String _FUND_FROM;
	private String _FUND_TO;
	private double _PRECENTAGE_OF_UNITS;
	private Date _INSERTED_DATE;
	private String _INSERTED_BY;
	private Date _UPDATED_DATE;
	private String _UPDATED_BY;
	private PolicyFundSwitchDetails _escapedModel;
}