/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifli.rapid.model.impl;

import com.ifli.rapid.model.ServiceMaster;
import com.ifli.rapid.model.ServiceMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceMaster service. Represents a row in the &quot;service_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifli.rapid.model.ServiceMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceMasterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see ServiceMasterImpl
 * @see com.ifli.rapid.model.ServiceMaster
 * @see com.ifli.rapid.model.ServiceMasterModel
 * @generated
 */
public class ServiceMasterModelImpl extends BaseModelImpl<ServiceMaster>
	implements ServiceMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service master model instance should use the {@link com.ifli.rapid.model.ServiceMaster} interface instead.
	 */
	public static final String TABLE_NAME = "service_master";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SERVICE_MASTER_ID", Types.INTEGER },
			{ "SERVICE_MASTER_NAME", Types.VARCHAR },
			{ "SERVICE_MASTER_DESC", Types.VARCHAR },
			{ "ACTIVE_FLAG", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table service_master (SERVICE_MASTER_ID INTEGER not null primary key,SERVICE_MASTER_NAME VARCHAR(75) null,SERVICE_MASTER_DESC VARCHAR(75) null,ACTIVE_FLAG VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table service_master";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceMaster.SERVICE_MASTER_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY service_master.SERVICE_MASTER_ID ASC";
	public static final String DATA_SOURCE = "servicesDataSource";
	public static final String SESSION_FACTORY = "servicesSessionFactory";
	public static final String TX_MANAGER = "servicesTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifli.rapid.model.ServiceMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifli.rapid.model.ServiceMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifli.rapid.model.ServiceMaster"));

	public ServiceMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _SERVICE_MASTER_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSERVICE_MASTER_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SERVICE_MASTER_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceMaster.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SERVICE_MASTER_ID", getSERVICE_MASTER_ID());
		attributes.put("SERVICE_MASTER_NAME", getSERVICE_MASTER_NAME());
		attributes.put("SERVICE_MASTER_DESC", getSERVICE_MASTER_DESC());
		attributes.put("ACTIVE_FLAG", getACTIVE_FLAG());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer SERVICE_MASTER_ID = (Integer)attributes.get("SERVICE_MASTER_ID");

		if (SERVICE_MASTER_ID != null) {
			setSERVICE_MASTER_ID(SERVICE_MASTER_ID);
		}

		String SERVICE_MASTER_NAME = (String)attributes.get(
				"SERVICE_MASTER_NAME");

		if (SERVICE_MASTER_NAME != null) {
			setSERVICE_MASTER_NAME(SERVICE_MASTER_NAME);
		}

		String SERVICE_MASTER_DESC = (String)attributes.get(
				"SERVICE_MASTER_DESC");

		if (SERVICE_MASTER_DESC != null) {
			setSERVICE_MASTER_DESC(SERVICE_MASTER_DESC);
		}

		String ACTIVE_FLAG = (String)attributes.get("ACTIVE_FLAG");

		if (ACTIVE_FLAG != null) {
			setACTIVE_FLAG(ACTIVE_FLAG);
		}
	}

	@Override
	public int getSERVICE_MASTER_ID() {
		return _SERVICE_MASTER_ID;
	}

	@Override
	public void setSERVICE_MASTER_ID(int SERVICE_MASTER_ID) {
		_SERVICE_MASTER_ID = SERVICE_MASTER_ID;
	}

	@Override
	public String getSERVICE_MASTER_NAME() {
		if (_SERVICE_MASTER_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _SERVICE_MASTER_NAME;
		}
	}

	@Override
	public void setSERVICE_MASTER_NAME(String SERVICE_MASTER_NAME) {
		_SERVICE_MASTER_NAME = SERVICE_MASTER_NAME;
	}

	@Override
	public String getSERVICE_MASTER_DESC() {
		if (_SERVICE_MASTER_DESC == null) {
			return StringPool.BLANK;
		}
		else {
			return _SERVICE_MASTER_DESC;
		}
	}

	@Override
	public void setSERVICE_MASTER_DESC(String SERVICE_MASTER_DESC) {
		_SERVICE_MASTER_DESC = SERVICE_MASTER_DESC;
	}

	@Override
	public String getACTIVE_FLAG() {
		if (_ACTIVE_FLAG == null) {
			return StringPool.BLANK;
		}
		else {
			return _ACTIVE_FLAG;
		}
	}

	@Override
	public void setACTIVE_FLAG(String ACTIVE_FLAG) {
		_ACTIVE_FLAG = ACTIVE_FLAG;
	}

	@Override
	public ServiceMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceMasterImpl serviceMasterImpl = new ServiceMasterImpl();

		serviceMasterImpl.setSERVICE_MASTER_ID(getSERVICE_MASTER_ID());
		serviceMasterImpl.setSERVICE_MASTER_NAME(getSERVICE_MASTER_NAME());
		serviceMasterImpl.setSERVICE_MASTER_DESC(getSERVICE_MASTER_DESC());
		serviceMasterImpl.setACTIVE_FLAG(getACTIVE_FLAG());

		serviceMasterImpl.resetOriginalValues();

		return serviceMasterImpl;
	}

	@Override
	public int compareTo(ServiceMaster serviceMaster) {
		int primaryKey = serviceMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceMaster)) {
			return false;
		}

		ServiceMaster serviceMaster = (ServiceMaster)obj;

		int primaryKey = serviceMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ServiceMaster> toCacheModel() {
		ServiceMasterCacheModel serviceMasterCacheModel = new ServiceMasterCacheModel();

		serviceMasterCacheModel.SERVICE_MASTER_ID = getSERVICE_MASTER_ID();

		serviceMasterCacheModel.SERVICE_MASTER_NAME = getSERVICE_MASTER_NAME();

		String SERVICE_MASTER_NAME = serviceMasterCacheModel.SERVICE_MASTER_NAME;

		if ((SERVICE_MASTER_NAME != null) &&
				(SERVICE_MASTER_NAME.length() == 0)) {
			serviceMasterCacheModel.SERVICE_MASTER_NAME = null;
		}

		serviceMasterCacheModel.SERVICE_MASTER_DESC = getSERVICE_MASTER_DESC();

		String SERVICE_MASTER_DESC = serviceMasterCacheModel.SERVICE_MASTER_DESC;

		if ((SERVICE_MASTER_DESC != null) &&
				(SERVICE_MASTER_DESC.length() == 0)) {
			serviceMasterCacheModel.SERVICE_MASTER_DESC = null;
		}

		serviceMasterCacheModel.ACTIVE_FLAG = getACTIVE_FLAG();

		String ACTIVE_FLAG = serviceMasterCacheModel.ACTIVE_FLAG;

		if ((ACTIVE_FLAG != null) && (ACTIVE_FLAG.length() == 0)) {
			serviceMasterCacheModel.ACTIVE_FLAG = null;
		}

		return serviceMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{SERVICE_MASTER_ID=");
		sb.append(getSERVICE_MASTER_ID());
		sb.append(", SERVICE_MASTER_NAME=");
		sb.append(getSERVICE_MASTER_NAME());
		sb.append(", SERVICE_MASTER_DESC=");
		sb.append(getSERVICE_MASTER_DESC());
		sb.append(", ACTIVE_FLAG=");
		sb.append(getACTIVE_FLAG());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.ifli.rapid.model.ServiceMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SERVICE_MASTER_ID</column-name><column-value><![CDATA[");
		sb.append(getSERVICE_MASTER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SERVICE_MASTER_NAME</column-name><column-value><![CDATA[");
		sb.append(getSERVICE_MASTER_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SERVICE_MASTER_DESC</column-name><column-value><![CDATA[");
		sb.append(getSERVICE_MASTER_DESC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACTIVE_FLAG</column-name><column-value><![CDATA[");
		sb.append(getACTIVE_FLAG());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceMaster.class
		};
	private int _SERVICE_MASTER_ID;
	private String _SERVICE_MASTER_NAME;
	private String _SERVICE_MASTER_DESC;
	private String _ACTIVE_FLAG;
	private ServiceMaster _escapedModel;
}