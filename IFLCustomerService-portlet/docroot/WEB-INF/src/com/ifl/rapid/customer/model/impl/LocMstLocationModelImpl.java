/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifl.rapid.customer.model.impl;

import com.ifl.rapid.customer.model.LocMstLocation;
import com.ifl.rapid.customer.model.LocMstLocationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LocMstLocation service. Represents a row in the &quot;Loc_Mst_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifl.rapid.customer.model.LocMstLocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocMstLocationImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see LocMstLocationImpl
 * @see com.ifl.rapid.customer.model.LocMstLocation
 * @see com.ifl.rapid.customer.model.LocMstLocationModel
 * @generated
 */
public class LocMstLocationModelImpl extends BaseModelImpl<LocMstLocation>
	implements LocMstLocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loc mst location model instance should use the {@link com.ifl.rapid.customer.model.LocMstLocation} interface instead.
	 */
	public static final String TABLE_NAME = "Loc_Mst_Location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LocationId", Types.INTEGER },
			{ "StateId", Types.INTEGER },
			{ "CityId", Types.INTEGER },
			{ "PinCode", Types.INTEGER },
			{ "AreaName", Types.VARCHAR },
			{ "Latitude", Types.DOUBLE },
			{ "Longitude", Types.DOUBLE },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "IsActive", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Loc_Mst_Location (LocationId INTEGER not null primary key IDENTITY,StateId INTEGER,CityId INTEGER,PinCode INTEGER,AreaName VARCHAR(75) null,Latitude DOUBLE,Longitude DOUBLE,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,IsActive VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Loc_Mst_Location";
	public static final String ORDER_BY_JPQL = " ORDER BY locMstLocation.LocationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Loc_Mst_Location.LocationId ASC";
	public static final String DATA_SOURCE = "servicesDataSourceService";
	public static final String SESSION_FACTORY = "servicesSessionFactoryService";
	public static final String TX_MANAGER = "servicesTransactionManagerService";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifl.rapid.customer.model.LocMstLocation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifl.rapid.customer.model.LocMstLocation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifl.rapid.customer.model.LocMstLocation"));

	public LocMstLocationModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _LocationId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _LocationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LocMstLocation.class;
	}

	@Override
	public String getModelClassName() {
		return LocMstLocation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("LocationId", getLocationId());
		attributes.put("StateId", getStateId());
		attributes.put("CityId", getCityId());
		attributes.put("PinCode", getPinCode());
		attributes.put("AreaName", getAreaName());
		attributes.put("Latitude", getLatitude());
		attributes.put("Longitude", getLongitude());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("IsActive", getIsActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer LocationId = (Integer)attributes.get("LocationId");

		if (LocationId != null) {
			setLocationId(LocationId);
		}

		Integer StateId = (Integer)attributes.get("StateId");

		if (StateId != null) {
			setStateId(StateId);
		}

		Integer CityId = (Integer)attributes.get("CityId");

		if (CityId != null) {
			setCityId(CityId);
		}

		Integer PinCode = (Integer)attributes.get("PinCode");

		if (PinCode != null) {
			setPinCode(PinCode);
		}

		String AreaName = (String)attributes.get("AreaName");

		if (AreaName != null) {
			setAreaName(AreaName);
		}

		Double Latitude = (Double)attributes.get("Latitude");

		if (Latitude != null) {
			setLatitude(Latitude);
		}

		Double Longitude = (Double)attributes.get("Longitude");

		if (Longitude != null) {
			setLongitude(Longitude);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String IsActive = (String)attributes.get("IsActive");

		if (IsActive != null) {
			setIsActive(IsActive);
		}
	}

	@Override
	public int getLocationId() {
		return _LocationId;
	}

	@Override
	public void setLocationId(int LocationId) {
		_LocationId = LocationId;
	}

	@Override
	public int getStateId() {
		return _StateId;
	}

	@Override
	public void setStateId(int StateId) {
		_StateId = StateId;
	}

	@Override
	public int getCityId() {
		return _CityId;
	}

	@Override
	public void setCityId(int CityId) {
		_CityId = CityId;
	}

	@Override
	public int getPinCode() {
		return _PinCode;
	}

	@Override
	public void setPinCode(int PinCode) {
		_PinCode = PinCode;
	}

	@Override
	public String getAreaName() {
		if (_AreaName == null) {
			return StringPool.BLANK;
		}
		else {
			return _AreaName;
		}
	}

	@Override
	public void setAreaName(String AreaName) {
		_AreaName = AreaName;
	}

	@Override
	public double getLatitude() {
		return _Latitude;
	}

	@Override
	public void setLatitude(double Latitude) {
		_Latitude = Latitude;
	}

	@Override
	public double getLongitude() {
		return _Longitude;
	}

	@Override
	public void setLongitude(double Longitude) {
		_Longitude = Longitude;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public String getIsActive() {
		if (_IsActive == null) {
			return StringPool.BLANK;
		}
		else {
			return _IsActive;
		}
	}

	@Override
	public void setIsActive(String IsActive) {
		_IsActive = IsActive;
	}

	@Override
	public LocMstLocation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LocMstLocation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocMstLocationImpl locMstLocationImpl = new LocMstLocationImpl();

		locMstLocationImpl.setLocationId(getLocationId());
		locMstLocationImpl.setStateId(getStateId());
		locMstLocationImpl.setCityId(getCityId());
		locMstLocationImpl.setPinCode(getPinCode());
		locMstLocationImpl.setAreaName(getAreaName());
		locMstLocationImpl.setLatitude(getLatitude());
		locMstLocationImpl.setLongitude(getLongitude());
		locMstLocationImpl.setCreatedBy(getCreatedBy());
		locMstLocationImpl.setCreatedDate(getCreatedDate());
		locMstLocationImpl.setModifiedBy(getModifiedBy());
		locMstLocationImpl.setModifiedDate(getModifiedDate());
		locMstLocationImpl.setIsActive(getIsActive());

		locMstLocationImpl.resetOriginalValues();

		return locMstLocationImpl;
	}

	@Override
	public int compareTo(LocMstLocation locMstLocation) {
		int primaryKey = locMstLocation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LocMstLocation)) {
			return false;
		}

		LocMstLocation locMstLocation = (LocMstLocation)obj;

		int primaryKey = locMstLocation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LocMstLocation> toCacheModel() {
		LocMstLocationCacheModel locMstLocationCacheModel = new LocMstLocationCacheModel();

		locMstLocationCacheModel.LocationId = getLocationId();

		locMstLocationCacheModel.StateId = getStateId();

		locMstLocationCacheModel.CityId = getCityId();

		locMstLocationCacheModel.PinCode = getPinCode();

		locMstLocationCacheModel.AreaName = getAreaName();

		String AreaName = locMstLocationCacheModel.AreaName;

		if ((AreaName != null) && (AreaName.length() == 0)) {
			locMstLocationCacheModel.AreaName = null;
		}

		locMstLocationCacheModel.Latitude = getLatitude();

		locMstLocationCacheModel.Longitude = getLongitude();

		locMstLocationCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = locMstLocationCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			locMstLocationCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			locMstLocationCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			locMstLocationCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		locMstLocationCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = locMstLocationCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			locMstLocationCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			locMstLocationCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			locMstLocationCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		locMstLocationCacheModel.IsActive = getIsActive();

		String IsActive = locMstLocationCacheModel.IsActive;

		if ((IsActive != null) && (IsActive.length() == 0)) {
			locMstLocationCacheModel.IsActive = null;
		}

		return locMstLocationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{LocationId=");
		sb.append(getLocationId());
		sb.append(", StateId=");
		sb.append(getStateId());
		sb.append(", CityId=");
		sb.append(getCityId());
		sb.append(", PinCode=");
		sb.append(getPinCode());
		sb.append(", AreaName=");
		sb.append(getAreaName());
		sb.append(", Latitude=");
		sb.append(getLatitude());
		sb.append(", Longitude=");
		sb.append(getLongitude());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", IsActive=");
		sb.append(getIsActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ifl.rapid.customer.model.LocMstLocation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>LocationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CityId</column-name><column-value><![CDATA[");
		sb.append(getCityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PinCode</column-name><column-value><![CDATA[");
		sb.append(getPinCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AreaName</column-name><column-value><![CDATA[");
		sb.append(getAreaName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IsActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LocMstLocation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LocMstLocation.class
		};
	private int _LocationId;
	private int _StateId;
	private int _CityId;
	private int _PinCode;
	private String _AreaName;
	private double _Latitude;
	private double _Longitude;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private String _IsActive;
	private LocMstLocation _escapedModel;
}