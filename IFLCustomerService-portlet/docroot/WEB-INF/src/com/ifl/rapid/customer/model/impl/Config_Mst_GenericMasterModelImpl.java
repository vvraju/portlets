/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifl.rapid.customer.model.impl;

import com.ifl.rapid.customer.model.Config_Mst_GenericMaster;
import com.ifl.rapid.customer.model.Config_Mst_GenericMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Config_Mst_GenericMaster service. Represents a row in the &quot;Config_Mst_GenericMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifl.rapid.customer.model.Config_Mst_GenericMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Config_Mst_GenericMasterImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see Config_Mst_GenericMasterImpl
 * @see com.ifl.rapid.customer.model.Config_Mst_GenericMaster
 * @see com.ifl.rapid.customer.model.Config_Mst_GenericMasterModel
 * @generated
 */
public class Config_Mst_GenericMasterModelImpl extends BaseModelImpl<Config_Mst_GenericMaster>
	implements Config_Mst_GenericMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a config_ mst_ generic master model instance should use the {@link com.ifl.rapid.customer.model.Config_Mst_GenericMaster} interface instead.
	 */
	public static final String TABLE_NAME = "Config_Mst_GenericMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GenericMasterId", Types.INTEGER },
			{ "MasterType", Types.VARCHAR },
			{ "MasterId", Types.INTEGER },
			{ "MasterKey", Types.VARCHAR },
			{ "IsActive", Types.VARCHAR },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "Description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Config_Mst_GenericMaster (GenericMasterId INTEGER not null primary key,MasterType VARCHAR(75) null,MasterId INTEGER,MasterKey VARCHAR(75) null,IsActive VARCHAR(75) null,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,Description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Config_Mst_GenericMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY config_Mst_GenericMaster.GenericMasterId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Config_Mst_GenericMaster.GenericMasterId ASC";
	public static final String DATA_SOURCE = "servicesDataSourceService";
	public static final String SESSION_FACTORY = "servicesSessionFactoryService";
	public static final String TX_MANAGER = "servicesTransactionManagerService";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifl.rapid.customer.model.Config_Mst_GenericMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifl.rapid.customer.model.Config_Mst_GenericMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ifl.rapid.customer.model.Config_Mst_GenericMaster"),
			true);
	public static long GENERICMASTERID_COLUMN_BITMASK = 1L;
	public static long MASTERKEY_COLUMN_BITMASK = 2L;
	public static long MASTERTYPE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifl.rapid.customer.model.Config_Mst_GenericMaster"));

	public Config_Mst_GenericMasterModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _GenericMasterId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setGenericMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _GenericMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Config_Mst_GenericMaster.class;
	}

	@Override
	public String getModelClassName() {
		return Config_Mst_GenericMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("GenericMasterId", getGenericMasterId());
		attributes.put("MasterType", getMasterType());
		attributes.put("MasterId", getMasterId());
		attributes.put("MasterKey", getMasterKey());
		attributes.put("IsActive", getIsActive());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("Description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer GenericMasterId = (Integer)attributes.get("GenericMasterId");

		if (GenericMasterId != null) {
			setGenericMasterId(GenericMasterId);
		}

		String MasterType = (String)attributes.get("MasterType");

		if (MasterType != null) {
			setMasterType(MasterType);
		}

		Integer MasterId = (Integer)attributes.get("MasterId");

		if (MasterId != null) {
			setMasterId(MasterId);
		}

		String MasterKey = (String)attributes.get("MasterKey");

		if (MasterKey != null) {
			setMasterKey(MasterKey);
		}

		String IsActive = (String)attributes.get("IsActive");

		if (IsActive != null) {
			setIsActive(IsActive);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}
	}

	@Override
	public int getGenericMasterId() {
		return _GenericMasterId;
	}

	@Override
	public void setGenericMasterId(int GenericMasterId) {
		_columnBitmask |= GENERICMASTERID_COLUMN_BITMASK;

		if (!_setOriginalGenericMasterId) {
			_setOriginalGenericMasterId = true;

			_originalGenericMasterId = _GenericMasterId;
		}

		_GenericMasterId = GenericMasterId;
	}

	public int getOriginalGenericMasterId() {
		return _originalGenericMasterId;
	}

	@Override
	public String getMasterType() {
		if (_MasterType == null) {
			return StringPool.BLANK;
		}
		else {
			return _MasterType;
		}
	}

	@Override
	public void setMasterType(String MasterType) {
		_columnBitmask |= MASTERTYPE_COLUMN_BITMASK;

		if (_originalMasterType == null) {
			_originalMasterType = _MasterType;
		}

		_MasterType = MasterType;
	}

	public String getOriginalMasterType() {
		return GetterUtil.getString(_originalMasterType);
	}

	@Override
	public int getMasterId() {
		return _MasterId;
	}

	@Override
	public void setMasterId(int MasterId) {
		_MasterId = MasterId;
	}

	@Override
	public String getMasterKey() {
		if (_MasterKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _MasterKey;
		}
	}

	@Override
	public void setMasterKey(String MasterKey) {
		_columnBitmask |= MASTERKEY_COLUMN_BITMASK;

		if (_originalMasterKey == null) {
			_originalMasterKey = _MasterKey;
		}

		_MasterKey = MasterKey;
	}

	public String getOriginalMasterKey() {
		return GetterUtil.getString(_originalMasterKey);
	}

	@Override
	public String getIsActive() {
		if (_IsActive == null) {
			return StringPool.BLANK;
		}
		else {
			return _IsActive;
		}
	}

	@Override
	public void setIsActive(String IsActive) {
		_IsActive = IsActive;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public String getDescription() {
		if (_Description == null) {
			return StringPool.BLANK;
		}
		else {
			return _Description;
		}
	}

	@Override
	public void setDescription(String Description) {
		_Description = Description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Config_Mst_GenericMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Config_Mst_GenericMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Config_Mst_GenericMasterImpl config_Mst_GenericMasterImpl = new Config_Mst_GenericMasterImpl();

		config_Mst_GenericMasterImpl.setGenericMasterId(getGenericMasterId());
		config_Mst_GenericMasterImpl.setMasterType(getMasterType());
		config_Mst_GenericMasterImpl.setMasterId(getMasterId());
		config_Mst_GenericMasterImpl.setMasterKey(getMasterKey());
		config_Mst_GenericMasterImpl.setIsActive(getIsActive());
		config_Mst_GenericMasterImpl.setCreatedBy(getCreatedBy());
		config_Mst_GenericMasterImpl.setCreatedDate(getCreatedDate());
		config_Mst_GenericMasterImpl.setModifiedBy(getModifiedBy());
		config_Mst_GenericMasterImpl.setModifiedDate(getModifiedDate());
		config_Mst_GenericMasterImpl.setDescription(getDescription());

		config_Mst_GenericMasterImpl.resetOriginalValues();

		return config_Mst_GenericMasterImpl;
	}

	@Override
	public int compareTo(Config_Mst_GenericMaster config_Mst_GenericMaster) {
		int primaryKey = config_Mst_GenericMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Config_Mst_GenericMaster)) {
			return false;
		}

		Config_Mst_GenericMaster config_Mst_GenericMaster = (Config_Mst_GenericMaster)obj;

		int primaryKey = config_Mst_GenericMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		Config_Mst_GenericMasterModelImpl config_Mst_GenericMasterModelImpl = this;

		config_Mst_GenericMasterModelImpl._originalGenericMasterId = config_Mst_GenericMasterModelImpl._GenericMasterId;

		config_Mst_GenericMasterModelImpl._setOriginalGenericMasterId = false;

		config_Mst_GenericMasterModelImpl._originalMasterType = config_Mst_GenericMasterModelImpl._MasterType;

		config_Mst_GenericMasterModelImpl._originalMasterKey = config_Mst_GenericMasterModelImpl._MasterKey;

		config_Mst_GenericMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Config_Mst_GenericMaster> toCacheModel() {
		Config_Mst_GenericMasterCacheModel config_Mst_GenericMasterCacheModel = new Config_Mst_GenericMasterCacheModel();

		config_Mst_GenericMasterCacheModel.GenericMasterId = getGenericMasterId();

		config_Mst_GenericMasterCacheModel.MasterType = getMasterType();

		String MasterType = config_Mst_GenericMasterCacheModel.MasterType;

		if ((MasterType != null) && (MasterType.length() == 0)) {
			config_Mst_GenericMasterCacheModel.MasterType = null;
		}

		config_Mst_GenericMasterCacheModel.MasterId = getMasterId();

		config_Mst_GenericMasterCacheModel.MasterKey = getMasterKey();

		String MasterKey = config_Mst_GenericMasterCacheModel.MasterKey;

		if ((MasterKey != null) && (MasterKey.length() == 0)) {
			config_Mst_GenericMasterCacheModel.MasterKey = null;
		}

		config_Mst_GenericMasterCacheModel.IsActive = getIsActive();

		String IsActive = config_Mst_GenericMasterCacheModel.IsActive;

		if ((IsActive != null) && (IsActive.length() == 0)) {
			config_Mst_GenericMasterCacheModel.IsActive = null;
		}

		config_Mst_GenericMasterCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = config_Mst_GenericMasterCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			config_Mst_GenericMasterCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			config_Mst_GenericMasterCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			config_Mst_GenericMasterCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		config_Mst_GenericMasterCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = config_Mst_GenericMasterCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			config_Mst_GenericMasterCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			config_Mst_GenericMasterCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			config_Mst_GenericMasterCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		config_Mst_GenericMasterCacheModel.Description = getDescription();

		String Description = config_Mst_GenericMasterCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			config_Mst_GenericMasterCacheModel.Description = null;
		}

		return config_Mst_GenericMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{GenericMasterId=");
		sb.append(getGenericMasterId());
		sb.append(", MasterType=");
		sb.append(getMasterType());
		sb.append(", MasterId=");
		sb.append(getMasterId());
		sb.append(", MasterKey=");
		sb.append(getMasterKey());
		sb.append(", IsActive=");
		sb.append(getIsActive());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ifl.rapid.customer.model.Config_Mst_GenericMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>GenericMasterId</column-name><column-value><![CDATA[");
		sb.append(getGenericMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MasterType</column-name><column-value><![CDATA[");
		sb.append(getMasterType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MasterId</column-name><column-value><![CDATA[");
		sb.append(getMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MasterKey</column-name><column-value><![CDATA[");
		sb.append(getMasterKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IsActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Config_Mst_GenericMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Config_Mst_GenericMaster.class
		};
	private int _GenericMasterId;
	private int _originalGenericMasterId;
	private boolean _setOriginalGenericMasterId;
	private String _MasterType;
	private String _originalMasterType;
	private int _MasterId;
	private String _MasterKey;
	private String _originalMasterKey;
	private String _IsActive;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private String _Description;
	private long _columnBitmask;
	private Config_Mst_GenericMaster _escapedModel;
}