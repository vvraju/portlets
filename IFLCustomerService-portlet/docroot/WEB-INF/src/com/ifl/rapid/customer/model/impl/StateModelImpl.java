/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ifl.rapid.customer.model.impl;

import com.ifl.rapid.customer.model.State;
import com.ifl.rapid.customer.model.StateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the State service. Represents a row in the &quot;Loc_Mst_State&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ifl.rapid.customer.model.StateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StateImpl}.
 * </p>
 *
 * @author Satya Kola
 * @see StateImpl
 * @see com.ifl.rapid.customer.model.State
 * @see com.ifl.rapid.customer.model.StateModel
 * @generated
 */
public class StateModelImpl extends BaseModelImpl<State> implements StateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a state model instance should use the {@link com.ifl.rapid.customer.model.State} interface instead.
	 */
	public static final String TABLE_NAME = "Loc_Mst_State";
	public static final Object[][] TABLE_COLUMNS = {
			{ "StateId", Types.INTEGER },
			{ "StateCode", Types.VARCHAR },
			{ "StateName", Types.VARCHAR },
			{ "IsActive", Types.INTEGER },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Loc_Mst_State (StateId INTEGER not null primary key,StateCode VARCHAR(75) null,StateName VARCHAR(75) null,IsActive INTEGER,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedDate DATE null,ModifiedBy VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Loc_Mst_State";
	public static final String ORDER_BY_JPQL = " ORDER BY state.StateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Loc_Mst_State.StateId ASC";
	public static final String DATA_SOURCE = "servicesDataSourceService";
	public static final String SESSION_FACTORY = "servicesSessionFactoryService";
	public static final String TX_MANAGER = "servicesTransactionManagerService";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ifl.rapid.customer.model.State"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ifl.rapid.customer.model.State"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ifl.rapid.customer.model.State"));

	public StateModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _StateId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _StateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return State.class;
	}

	@Override
	public String getModelClassName() {
		return State.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("StateId", getStateId());
		attributes.put("StateCode", getStateCode());
		attributes.put("StateName", getStateName());
		attributes.put("IsActive", getIsActive());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("ModifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer StateId = (Integer)attributes.get("StateId");

		if (StateId != null) {
			setStateId(StateId);
		}

		String StateCode = (String)attributes.get("StateCode");

		if (StateCode != null) {
			setStateCode(StateCode);
		}

		String StateName = (String)attributes.get("StateName");

		if (StateName != null) {
			setStateName(StateName);
		}

		Integer IsActive = (Integer)attributes.get("IsActive");

		if (IsActive != null) {
			setIsActive(IsActive);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}
	}

	@Override
	public int getStateId() {
		return _StateId;
	}

	@Override
	public void setStateId(int StateId) {
		_StateId = StateId;
	}

	@Override
	public String getStateCode() {
		if (_StateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _StateCode;
		}
	}

	@Override
	public void setStateCode(String StateCode) {
		_StateCode = StateCode;
	}

	@Override
	public String getStateName() {
		if (_StateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _StateName;
		}
	}

	@Override
	public void setStateName(String StateName) {
		_StateName = StateName;
	}

	@Override
	public int getIsActive() {
		return _IsActive;
	}

	@Override
	public void setIsActive(int IsActive) {
		_IsActive = IsActive;
	}

	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public State toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (State)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StateImpl stateImpl = new StateImpl();

		stateImpl.setStateId(getStateId());
		stateImpl.setStateCode(getStateCode());
		stateImpl.setStateName(getStateName());
		stateImpl.setIsActive(getIsActive());
		stateImpl.setCreatedBy(getCreatedBy());
		stateImpl.setCreatedDate(getCreatedDate());
		stateImpl.setModifiedDate(getModifiedDate());
		stateImpl.setModifiedBy(getModifiedBy());

		stateImpl.resetOriginalValues();

		return stateImpl;
	}

	@Override
	public int compareTo(State state) {
		int primaryKey = state.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof State)) {
			return false;
		}

		State state = (State)obj;

		int primaryKey = state.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<State> toCacheModel() {
		StateCacheModel stateCacheModel = new StateCacheModel();

		stateCacheModel.StateId = getStateId();

		stateCacheModel.StateCode = getStateCode();

		String StateCode = stateCacheModel.StateCode;

		if ((StateCode != null) && (StateCode.length() == 0)) {
			stateCacheModel.StateCode = null;
		}

		stateCacheModel.StateName = getStateName();

		String StateName = stateCacheModel.StateName;

		if ((StateName != null) && (StateName.length() == 0)) {
			stateCacheModel.StateName = null;
		}

		stateCacheModel.IsActive = getIsActive();

		stateCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = stateCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			stateCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			stateCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			stateCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			stateCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			stateCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		stateCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = stateCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			stateCacheModel.ModifiedBy = null;
		}

		return stateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{StateId=");
		sb.append(getStateId());
		sb.append(", StateCode=");
		sb.append(getStateCode());
		sb.append(", StateName=");
		sb.append(getStateName());
		sb.append(", IsActive=");
		sb.append(getIsActive());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ifl.rapid.customer.model.State");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>StateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IsActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = State.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { State.class };
	private int _StateId;
	private String _StateCode;
	private String _StateName;
	private int _IsActive;
	private String _CreatedBy;
	private Date _CreatedDate;
	private Date _ModifiedDate;
	private String _ModifiedBy;
	private State _escapedModel;
}